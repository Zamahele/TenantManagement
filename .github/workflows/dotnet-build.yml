name: PropertyManagement Build .NET 8

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Test with coverage
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./PropertyManagement.Test/TestResults/**/*.cobertura.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish
        run: dotnet publish --configuration Release --output ./publish

      - name: Copy Dockerfile to publish output
        run: cp PropertyManagement.Web/Dockerfile ./publish/

      - name: Copy certificate to root (with docker-compose.yml)
        run: cp PropertyManagement.Web/https/aspnetapp.pfx ./aspnetapp.pfx

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish

      - name: Upload docker-compose and cert
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: |
            docker-compose.yml
            aspnetapp.pfx

  docker-build:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker image
        run: |
          docker build -f PropertyManagement.Web/Dockerfile -t ghcr.io/zamahele/tenantmanagement:${{ github.sha }} .

      - name: Upload Docker image artifact
        run: echo "Image built"

  docker-push:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Pull and push Docker image
        run: |
          docker pull ghcr.io/zamahele/tenantmanagement:test
          docker push ghcr.io/zamahele/tenantmanagement:test
      - name: Push Docker image
        run: |
          docker push ghcr.io/zamahele/tenantmanagement:${{ github.sha }}
