name: PropertyManagement Build .NET 8

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Test with coverage
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./PropertyManagement.Test/TestResults/**/*.cobertura.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish
        run: dotnet publish --configuration Release --output ./publish

      - name: Copy Dockerfile to publish output
        run: cp PropertyManagement.Web/Dockerfile ./publish/

      - name: Copy certificate to root (with docker-compose.yml)
        run: cp PropertyManagement.Web/https/aspnetapp.pfx ./aspnetapp.pfx

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish

      - name: Upload docker-compose and cert
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: |
            docker-compose.yml
            aspnetapp.pfx

  ftp-deploy:
    runs-on: ubuntu-latest
    needs: publish
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Download build artifact (for migrations)
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: ./source

      - name: Download published artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./publish

      - name: Setup .NET 8 for migrations
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Replace database connection placeholders
        run: |
          # Replace placeholders in appsettings.Production.json with actual secret values
          sed -i 's/#{DB_SERVER}#/${{ secrets.DB_SERVER }}/g' ./publish/appsettings.Production.json
          sed -i 's/#{DB_USERNAME}#/${{ secrets.DB_USERNAME }}/g' ./publish/appsettings.Production.json
          sed -i 's/#{DB_PASSWORD}#/${{ secrets.DB_PASSWORD }}/g' ./publish/appsettings.Production.json
          
          # Also update source appsettings for migrations
          sed -i 's/#{DB_SERVER}#/${{ secrets.DB_SERVER }}/g' ./source/PropertyManagement.Web/appsettings.Production.json
          sed -i 's/#{DB_USERNAME}#/${{ secrets.DB_USERNAME }}/g' ./source/PropertyManagement.Web/appsettings.Production.json
          sed -i 's/#{DB_PASSWORD}#/${{ secrets.DB_PASSWORD }}/g' ./source/PropertyManagement.Web/appsettings.Production.json

      - name: Apply Entity Framework Migrations (Required)
        run: |
          echo "Installing Entity Framework CLI tools..."
          dotnet tool install --global dotnet-ef --version 8.0.0 || true
          
          echo "Setting environment for Production..."
          export ASPNETCORE_ENVIRONMENT=Production
          
          echo "Building projects for migrations..."
          cd ./source
          dotnet restore
          dotnet build --configuration Release
          
          echo "Applying database migrations (REQUIRED FOR DEPLOYMENT)..."
          CONNECTION_STRING="Server=${{ secrets.DB_SERVER }};Database=cottagedb;User Id=${{ secrets.DB_USERNAME }};Password=${{ secrets.DB_PASSWORD }};MultipleActiveResultSets=true;TrustServerCertificate=True;Encrypt=True"
          
          echo "Testing database connection..."
          if ! dotnet ef database update --project PropertyManagement.Infrastructure --startup-project PropertyManagement.Web --connection "$CONNECTION_STRING" --verbose; then
            echo "? Database migration failed!"
            echo "?? Deployment will be cancelled to prevent deploying incompatible application."
            echo ""
            echo "Possible solutions:"
            echo "1. Check database server connectivity and firewall settings"
            echo "2. Verify database credentials in GitHub secrets"
            echo "3. Ensure database user has sufficient permissions"
            echo "4. Check if database server allows remote connections"
            echo ""
            echo "Database connection details:"
            echo "Server: ${{ secrets.DB_SERVER }}"
            echo "Database: cottagedb"
            echo "Username: ${{ secrets.DB_USERNAME }}"
            exit 1
          fi
          
          echo "? Database migrations applied successfully!"
          echo "? Deployment can proceed safely."

      - name: Deploy to FTP server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./publish/
          server-dir: /gcweproperty.co.za/wwwroot/
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            Dockerfile

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker image
        run: |
          docker build -f PropertyManagement.Web/Dockerfile -t ghcr.io/zamahele/tenantmanagement:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push ghcr.io/zamahele/tenantmanagement:${{ github.sha }}

      - name: Tag image as latest
        run: docker tag ghcr.io/zamahele/tenantmanagement:${{ github.sha }} ghcr.io/zamahele/tenantmanagement:latest

      - name: Push latest tag
        run: docker push ghcr.io/zamahele/tenantmanagement:latest
