name: PropertyManagement Build .NET 8

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Test with coverage
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./PropertyManagement.Test/TestResults/**/*.cobertura.xml
          token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish
        run: dotnet publish --configuration Release --output ./publish

      - name: Copy Dockerfile to publish output
        run: cp PropertyManagement.Web/Dockerfile ./publish/

      - name: Copy certificate to root (with docker-compose.yml)
        run: cp PropertyManagement.Web/https/aspnetapp.pfx ./aspnetapp.pfx

      - name: Upload published artifact
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish

      - name: Upload docker-compose and cert
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: |
            docker-compose.yml
            aspnetapp.pfx

  ftp-deploy:
    runs-on: ubuntu-latest
    needs: publish
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Download published artifact
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./publish

      - name: Prepare deployment files
        run: |
          echo "Configuring production settings..."
          sed -i 's/#{DB_SERVER}#/${{ secrets.DB_SERVER }}/g' ./publish/appsettings.Production.json
          sed -i 's/#{DB_USERNAME}#/${{ secrets.DB_USERNAME }}/g' ./publish/appsettings.Production.json
          sed -i 's/#{DB_PASSWORD}#/${{ secrets.DB_PASSWORD }}/g' ./publish/appsettings.Production.json
          
          echo "Creating web.config for Windows SSD hosting..."
          cat > ./publish/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
<configuration>
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <handlers>
        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
      </handlers>
      <aspNetCore processPath="dotnet" 
                  arguments=".\PropertyManagement.Web.dll" 
                  stdoutLogEnabled="true" 
                  stdoutLogFile=".\logs\stdout" 
                  hostingModel="inprocess">
        <environmentVariables>
          <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" />
          <environmentVariable name="ASPNETCORE_URLS" value="http://+:80" />
        </environmentVariables>
      </aspNetCore>
      <directoryBrowse enabled="false" />
      <defaultDocument>
        <files>
          <clear />
          <add value="index.html" />
        </files>
      </defaultDocument>
      <httpErrors errorMode="DetailedLocalOnly" existingResponse="Auto" />
      <staticContent>
        <remove fileExtension=".json" />
        <mimeMap fileExtension=".json" mimeType="application/json" />
        <remove fileExtension=".woff" />
        <mimeMap fileExtension=".woff" mimeType="application/font-woff" />
        <remove fileExtension=".woff2" />
        <mimeMap fileExtension=".woff2" mimeType="application/font-woff2" />
      </staticContent>
      <security>
        <requestFiltering>
          <hiddenSegments>
            <add segment="logs" />
          </hiddenSegments>
        </requestFiltering>
      </security>
    </system.webServer>
  </location>
</configuration>
EOF
          
          echo "Creating log directory structure..."
          mkdir -p ./publish/logs
          
          echo "Creating setup script for Windows hosting..."
          cat > ./publish/setup-logs.ps1 << 'EOF'
# Windows hosting log setup script
$logDir = ".\logs"
if (-not (Test-Path $logDir)) {
    try {
        New-Item -ItemType Directory -Path $logDir -Force
        Write-Host "Created logs directory: $logDir"
    } catch {
        Write-Host "Could not create logs directory: $($_.Exception.Message)"
    }
} else {
    Write-Host "Logs directory already exists: $logDir"
}

# Set permissions for IIS to write to logs
try {
    $acl = Get-Acl $logDir
    $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("IIS_IUSRS","FullControl","ContainerInherit,ObjectInherit","None","Allow")
    $acl.SetAccessRule($accessRule)
    Set-Acl $logDir $acl
    Write-Host "Set permissions for IIS_IUSRS on logs directory"
} catch {
    Write-Host "Could not set permissions: $($_.Exception.Message)"
}
EOF
          
          echo "Database credentials configured successfully"
          echo "Web.config created for Windows SSD hosting"
          echo "Log directory setup script created"

      - name: Deploy to FTP server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./publish/
          server-dir: /wwwroot/
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            Dockerfile

      - name: Wait for application startup
        run: |
          echo "Waiting for application to initialize on Windows SSD hosting..."
          echo "This may take a few minutes for first-time deployment..."
          sleep 60
          
          echo "Testing application endpoints..."
          MAX_ATTEMPTS=20
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Testing application health (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            
            # Try production domain first, then temporary URL
            if curl -f -s --max-time 15 "https://gcweproperty.co.za/health" > /dev/null 2>&1; then
              echo "Application is responding via production domain (HTTPS)"
              echo "APP_URL=https://gcweproperty.co.za" >> $GITHUB_ENV
              break
            elif curl -f -s --max-time 15 "http://gcweproperty.co.za/health" > /dev/null 2>&1; then
              echo "Application is responding via production domain (HTTP)"
              echo "APP_URL=http://gcweproperty.co.za" >> $GITHUB_ENV
              break
            elif curl -f -s --max-time 15 "http://gcweproperty.co.za.host-za.com/health" > /dev/null 2>&1; then
              echo "Application is responding via temporary URL"
              echo "APP_URL=http://gcweproperty.co.za.host-za.com" >> $GITHUB_ENV
              break
            else
              echo "Application not ready yet, waiting..."
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "Application did not start within expected time"
                echo "Proceeding anyway - may need manual verification"
                echo "APP_URL=http://gcweproperty.co.za" >> $GITHUB_ENV
              else
                sleep 20
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Apply database migrations
        continue-on-error: true
        run: |
          echo "Attempting automatic database migration..."
          
          if [ -z "$APP_URL" ]; then
            echo "Application URL not set, using production domain"
            APP_URL="http://gcweproperty.co.za"
          fi
          
          MIGRATION_URL="$APP_URL/api/migration/apply"
          STATUS_URL="$APP_URL/api/migration/status"
          AUTH_TOKEN="${{ secrets.FTP_PASSWORD }}"
          
          echo "Migration endpoint: $MIGRATION_URL"
          echo "Status endpoint: $STATUS_URL"
          
          # First check if migration endpoint exists
          echo "Checking if migration endpoint is available..."
          STATUS_CHECK=$(curl -s -w "%{http_code}" --max-time 15 "$STATUS_URL" -o /dev/null 2>/dev/null || echo "000")
          
          if [ "$STATUS_CHECK" = "200" ]; then
            echo "Migration endpoints are available"
            
            # Apply migrations
            echo "Applying database migrations..."
            RESPONSE=$(curl -s -w "\n%{http_code}" --max-time 45 \
              -X POST \
              -H "Content-Type: application/json" \
              -H "authToken: $AUTH_TOKEN" \
              "$MIGRATION_URL" 2>/dev/null || echo -e "\n000")
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')
            
            echo "Migration response code: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "Migration request successful!"
              echo "Response: $BODY"
              
              if echo "$BODY" | grep -q '"success":true'; then
                echo "Database migrations applied successfully!"
              else
                echo "Migration completed but may need verification"
              fi
            elif [ "$HTTP_CODE" = "401" ]; then
              echo "Migration endpoint requires different authentication"
            elif [ "$HTTP_CODE" = "500" ]; then
              echo "Server error during migration:"
              echo "$BODY"
            else
              echo "Migration endpoint returned unexpected response: $HTTP_CODE"
            fi
            
            # Check final status
            echo "Checking final migration status..."
            FINAL_STATUS=$(curl -s --max-time 15 "$STATUS_URL" 2>/dev/null || echo '{"error":"Could not check status"}')
            echo "Migration status: $FINAL_STATUS"
            
          else
            echo "Migration endpoints not available (HTTP $STATUS_CHECK)"
            echo "This is normal for first deployment - database may need manual setup"
            echo "Application deployed successfully"
          fi

      - name: Deployment Summary
        run: |
          echo ""
          echo "========================================="
          echo "DEPLOYMENT TO WINDOWS SSD HOSTING COMPLETED!"
          echo "========================================="
          echo ""
          echo "Your Property Management application has been deployed to Absolute Hosting!"
          echo ""
          echo "Application URLs:"
          echo "- Production: http://gcweproperty.co.za/"
          echo "- HTTPS: https://gcweproperty.co.za/ (if SSL configured)"
          echo "- Temporary: http://gcweproperty.co.za.host-za.com/ (for testing)"
          echo ""
          echo "Control Panel Access:"
          echo "- Panel: https://solid.zadns.co.za"
          echo "- Username: gcweprop"
          echo "- Use your hosting password"
          echo ""
          echo "FTP Details (for manual access):"
          echo "- Server: ftp.gcweproperty.co.za"
          echo "- Username: gcweprop"
          echo "- Directory: /wwwroot/"
          echo ""
          echo "Application Structure:"
          echo "- Application Files: /wwwroot/"
          echo "- Log Files: /wwwroot/logs/"
          echo "- Configuration: /wwwroot/appsettings.Production.json"
          echo "- IIS Config: /wwwroot/web.config"
          echo ""
          echo "Health & Monitoring:"
          echo "- Health Check: /health"
          echo "- Migration Status: /api/migration/status"
          echo "- Prometheus Metrics: /metrics"
          echo ""
          echo "Email Access:"
          echo "- Webmail: http://mail.gcweproperty.co.za"
          echo ""
          echo "Default Admin Login:"
          echo "- Username: Admin"
          echo "- Password: 01Pa\$\$w0rd2025#"
          echo ""
          echo "Next Steps:"
          echo "1. Test application at: http://gcweproperty.co.za/"
          echo "2. Login with admin credentials"
          echo "3. Set up database if not automatically configured"
          echo "4. Configure domain DNS if needed"
          echo "5. Set up SSL certificate in hosting panel"
          echo ""
          echo "Support:"
          echo "- Hosting Support: Absolute Hosting"
          echo "- Status Page: Check their service status"
          echo "- WhatsApp: Available for emergencies"
          echo ""
          echo "Deployment Complete! ??"

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build Docker image
        run: |
          docker build -f PropertyManagement.Web/Dockerfile -t ghcr.io/zamahele/tenantmanagement:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push ghcr.io/zamahele/tenantmanagement:${{ github.sha }}

      - name: Tag image as latest
        run: docker tag ghcr.io/zamahele/tenantmanagement:${{ github.sha }} ghcr.io/zamahele/tenantmanagement:latest

      - name: Push latest tag
        run: docker push ghcr.io/zamahele/tenantmanagement:latest
