@model IEnumerable<PropertyManagement.Web.ViewModels.InspectionViewModel>
@{
    ViewData["Title"] = "Inspections";
}

<div class="card shadow-lg" style="font-size: 1.15rem;">
    <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
        <h2 class="mb-0 display-6"><i class="bi bi-clipboard-check"></i> Inspections</h2>
        <button id="addInspectionBtn" class="btn btn-light text-primary fw-bold">
            <i class="bi bi-plus-circle"></i> Add Inspection
        </button>
    </div>
    <div class="card-body p-4" style="background-color: #f8f9fa;">
        <!-- Search Component -->
        @{
            ViewData["SearchId"] = "inspections-search";
            ViewData["SearchPlaceholder"] = "Search inspections by room, result, or notes...";
            ViewData["SearchLabel"] = "Search Inspections";
            ViewData["ShowExtraActions"] = true;
            ViewData["ExtraActionsContent"] = "<button class='btn btn-outline-secondary btn-sm' onclick='exportInspections()'><i class='bi bi-download'></i> Export</button><button class='btn btn-outline-primary btn-sm' onclick='refreshInspections()'><i class='bi bi-arrow-clockwise'></i> Refresh</button>";
        }
        @await Html.PartialAsync("_TableSearch")

        <!-- Inspections Table with Pagination -->
        <table class="table table-striped table-bordered align-middle mb-0" 
               id="inspectionsTable"
               data-datatable
               data-page-length="10"
               data-search-label="Search inspections:"
               data-empty-message="No inspections found">
            <thead class="table-light">
                <tr>
                    <th>Room</th>
                    <th>Date</th>
                    <th>Result</th>
                    <th>Notes</th>
                    <th style="width: 120px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var inspection in Model)
                {
                    <tr>
                        <td>
                            <span class="fw-semibold">@inspection.Room?.Number</span>
                        </td>
                        <td>
                            <span class="text-muted">@inspection.Date.ToShortDateString()</span>
                        </td>
                        <td>
                            <span class="badge bg-@(inspection.Result?.ToLower() == "passed" ? "success" : inspection.Result?.ToLower() == "failed" ? "danger" : "warning")">
                                @inspection.Result
                            </span>
                        </td>
                        <td>
                            <span class="text-truncate d-inline-block" style="max-width: 200px;" title="@inspection.Notes">
                                @inspection.Notes
                            </span>
                        </td>
                        <td class="text-center">
                            <div class="btn-group" role="group" aria-label="Inspection actions">
                                <button type="button" 
                                        class="btn btn-sm btn-outline-primary" 
                                        onclick="openEditInspectionModal(@inspection.InspectionId)" 
                                        title="Edit Inspection">
                                    <i class="bi bi-pencil-square"></i>
                                </button>
                                <button type="button" 
                                        class="btn btn-sm btn-outline-danger" 
                                        onclick="openInspectionDeleteModal(@inspection.InspectionId, 'Room @inspection.Room?.Number', 'Inspection on @inspection.Date.ToShortDateString() - Result: @inspection.Result')" 
                                        title="Delete Inspection">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Modal Container -->
<div id="inspectionModal" class="inspection-modal-overlay" style="display: none !important;">
  <div class="inspection-modal-dialog">
    <div class="inspection-modal-content">
      <div class="inspection-modal-header">
        <h5 class="inspection-modal-title" id="inspectionModalTitle">Add Inspection</h5>
        <button type="button" class="inspection-btn-close" onclick="closeInspectionModal()" aria-label="Close">&times;</button>
      </div>
      <div class="inspection-modal-body" id="inspectionModalBody">
        <!-- Form content will be loaded here via AJAX -->
      </div>
    </div>
  </div>
</div>

<!-- Custom Delete Modal - Matching Rooms Design -->
<div id="deleteModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeInspectionDeleteModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h4 class="custom-modal-title">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        <span id="deleteModalTitle">Confirm Delete</span>
      </h4>
      <button type="button" class="custom-modal-close" onclick="closeInspectionDeleteModal()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    <div class="custom-modal-body" id="deleteModalBody">
      <!-- Delete form content will be loaded here -->
    </div>
  </div>
</div>

<style>
  .inspection-modal-overlay {
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    background-color: rgba(0, 0, 0, 0.7) !important;
    z-index: 99999 !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    padding: 20px !important;
  }

  .inspection-modal-dialog {
    width: 100% !important;
    max-width: 800px !important;
    margin: 0 auto !important;
    display: flex !important;
    align-items: center !important;
    min-height: 100% !important;
  }

  .inspection-modal-content {
    background-color: white !important;
    border-radius: 12px !important;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5) !important;
    width: 100% !important;
    max-width: 600px !important;
    max-height: 90vh !important;
    overflow-y: auto !important;
    position: relative !important;
    margin: auto !important;
  }

  .inspection-modal-header {
    padding: 1.5rem !important;
    border-bottom: 1px solid #dee2e6 !important;
    display: flex !important;
    align-items: center !important;
    justify-content: space-between !important;
    background-color: #f8f9fa !important;
    border-radius: 12px 12px 0 0 !important;
  }

  .inspection-modal-title {
    margin: 0 !important;
    font-size: 1.25rem !important;
    font-weight: 600 !important;
    color: #333 !important;
  }

  .inspection-modal-body {
    padding: 1.5rem !important;
  }

  .inspection-btn-close {
    background: none !important;
    border: none !important;
    font-size: 2rem !important;
    cursor: pointer !important;
    color: #6c757d !important;
    line-height: 1 !important;
    padding: 0 !important;
    width: 30px !important;
    height: 30px !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  .inspection-btn-close:hover {
    color: #000 !important;
  }

  /* Custom Modal Styles - Matching Rooms Design */
  .custom-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1050;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .custom-modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4);
  }
  
  .custom-modal-content {
    position: relative;
    background: white;
    border-radius: 8px;
    width: 90%;
    max-width: 900px;
    max-height: 90vh;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    border: 1px solid #dee2e6;
    z-index: 1051;
  }
  
  .custom-modal-header {
    background: #f8f9fa;
    color: #495057;
    padding: 1.25rem 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #dee2e6;
  }
  
  .custom-modal-title {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    color: #212529;
  }
  
  .custom-modal-close {
    background: none;
    border: none;
    color: #6c757d;
    font-size: 1.25rem;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.15s ease;
  }
  
  .custom-modal-close:hover {
    background-color: #e9ecef;
    color: #495057;
  }
  
  .custom-modal-body {
    padding: 1.5rem;
    max-height: calc(90vh - 100px);
    overflow-y: auto;
  }
  
  /* Responsive Design */
  @@media (max-width: 768px) {
    .custom-modal-content {
      width: 95%;
      max-height: 95vh;
      margin: 1rem;
    }
    
    .custom-modal-header {
      padding: 1rem 1.5rem;
    }
    
    .custom-modal-body {
      padding: 1.5rem;
      max-height: calc(95vh - 100px);
    }
    
    .custom-modal-title {
      font-size: 1.1rem;
    }
  }
  
  /* Smooth scrollbar for modal body */
  .custom-modal-body::-webkit-scrollbar {
    width: 6px;
  }
  
  .custom-modal-body::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
  }
  
  .custom-modal-body::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
  }
  
  .custom-modal-body::-webkit-scrollbar-thumb:hover {
    background: #a1a1a1;
  }
</style>

<script>
  function getAntiForgeryToken() {
    return document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
  }

  function openAddInspectionModal() {
    console.log('openAddInspectionModal called');
    loadInspectionForm('Add Inspection', '/Inspections/InspectionForm');
  }

  function openEditInspectionModal(id) {
    loadInspectionForm('Edit Inspection', `/Inspections/InspectionForm/${id}`);
  }

  function loadInspectionForm(title, url) {
    console.log('loadInspectionForm called with:', title, url);
    const modal = document.getElementById('inspectionModal');
    const modalTitle = document.getElementById('inspectionModalTitle');
    const modalBody = document.getElementById('inspectionModalBody');
    
    console.log('Modal elements found:', { modal, modalTitle, modalBody });
    
    if (!modal || !modalTitle || !modalBody) {
      console.error('Missing modal elements');
      return;
    }
    
    modalTitle.textContent = title;
    modalBody.innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
    
    modal.style.setProperty('display', 'flex', 'important');
    document.body.style.overflow = 'hidden';
    console.log('Modal display set, element visible:', modal.offsetWidth > 0 && modal.offsetHeight > 0);
    console.log('Modal computed style display:', getComputedStyle(modal).display);
    
    fetch(url, {
      method: 'GET',
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => {
      console.log('Fetch response status:', response.status, response.statusText);
      if (!response.ok) {
        throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);
      }
      return response.text();
    })
    .then(html => {
      console.log('Form HTML received, length:', html.length);
      console.log('First 200 chars of HTML:', html.substring(0, 200));
      modalBody.innerHTML = html;
      initializeInspectionForm();
    })
    .catch(error => {
      console.error('Error loading form:', error);
      modalBody.innerHTML = '<div class="alert alert-danger">Error loading form: ' + error.message + '</div>';
    });
  }

  function initializeInspectionForm() {
    const form = document.getElementById('inspectionForm');
    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        submitInspectionForm(form);
      });
    }
  }

  function submitInspectionForm(form) {
    const submitButton = form.querySelector('button[type="submit"]');
    const spinner = submitButton?.querySelector('.spinner-border');
    const errorDiv = document.getElementById('formErrors');
    const successDiv = document.getElementById('formSuccess');
    
    // Hide previous messages
    if (errorDiv) errorDiv.style.display = 'none';
    if (successDiv) successDiv.style.display = 'none';
    
    // Show loading state
    if (submitButton) submitButton.disabled = true;
    if (spinner) spinner.style.display = 'inline-block';
    
    const formData = new FormData(form);
    
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => {
      if (!response.ok) {
        return response.text().then(text => {
          throw new Error(text || 'Server error');
        });
      }
      return response.json();
    })
    .then(result => {
      if (result.success) {
        // Show success message
        if (successDiv) {
          successDiv.innerHTML = '<i class="bi bi-check-circle"></i> ' + result.message;
          successDiv.style.display = 'block';
        }
        
        // Close modal after short delay
        setTimeout(() => {
          closeInspectionModal();
          
          // Refresh the page to show updated data
          window.location.reload();
        }, 1500);
      } else {
        // Show error messages
        var errors = Array.isArray(result.errors) ? result.errors : [result.message || 'An error occurred'];
        if (errorDiv) {
          errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> ' + errors.join('<br>');
          errorDiv.style.display = 'block';
        }
      }
    })
    .catch(error => {
      console.error('Form submission error:', error);
      if (errorDiv) {
        errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> An error occurred while saving. Please try again.';
        errorDiv.style.display = 'block';
      }
    })
    .finally(() => {
      if (submitButton) submitButton.disabled = false;
      if (spinner) spinner.style.display = 'none';
    });
  }

  function closeInspectionModal() {
    const modal = document.getElementById('inspectionModal');
    modal.style.setProperty('display', 'none', 'important');
    document.body.style.overflow = 'auto';
  }

  function exportInspections() {
    // TODO: Implement export functionality
    console.log('Export inspections functionality not yet implemented');
  }

  function refreshInspections() {
    window.location.reload();
  }


  // Debug: Log when script is loaded
  console.log('Inspections script loaded');
  console.log('openAddInspectionModal function defined:', typeof openAddInspectionModal);
  
  // Test the function is available when page loads
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, openAddInspectionModal function available:', typeof openAddInspectionModal);
    
    // Add programmatic event handler as backup
    const addBtn = document.getElementById('addInspectionBtn');
    if (addBtn) {
      console.log('Adding programmatic click handler to button');
      addBtn.addEventListener('click', function(e) {
        console.log('Button clicked programmatically');
        e.preventDefault();
        if (typeof openAddInspectionModal === 'function') {
          openAddInspectionModal();
        } else {
          console.error('openAddInspectionModal function not available');
        }
      });
    } else {
      console.error('Add inspection button not found');
    }
  });
  
  // Delete Modal Functions - Matching Rooms Implementation
  function openInspectionDeleteModal(entityId, roomInfo, inspectionDetails) {
      var modal = document.getElementById('deleteModal');
      var modalTitle = document.getElementById('deleteModalTitle');
      var modalBody = document.getElementById('deleteModalBody');
      
      modalTitle.textContent = 'Delete Inspection';
      
      // Create delete form content with professional styling - EXACTLY like Rooms
      modalBody.innerHTML = `
          <!-- Form Error Display -->
          <div id="formErrors" class="alert alert-danger" style="display: none;"></div>
          <div id="formSuccess" class="alert alert-success" style="display: none;"></div>

          <form id="deleteForm" action="/Inspections/Delete" method="post" class="needs-validation" novalidate>
              <input name="__RequestVerificationToken" type="hidden" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
              <input type="hidden" name="id" value="${entityId}" />
              
              <div class="row g-4">
                  <div class="col-12">
                      <div class="alert alert-danger border-danger">
                          <div class="d-flex align-items-center mb-3">
                              <i class="bi bi-exclamation-triangle-fill text-danger fs-2 me-3"></i>
                              <div>
                                  <h5 class="alert-heading mb-1 text-danger">Delete Inspection</h5>
                                  <p class="mb-0">This action cannot be undone.</p>
                              </div>
                          </div>
                          
                          <div class="mb-0">Are you sure you want to delete inspection for <strong>${roomInfo}</strong>?<br><small class="text-muted">${inspectionDetails}</small></div>
                      </div>
                      
                      <div class="card border-info bg-light">
                          <div class="card-body p-3">
                              <h6 class="card-title text-info mb-2">
                                  <i class="bi bi-info-circle"></i> Delete Information
                              </h6>
                              <div>
                                  <p class="mb-1"><strong>Entity ID:</strong> <span>${entityId}</span></p>
                                  <p class="mb-1"><strong>Action:</strong> <span class="text-danger">Permanent Deletion</span></p>
                                  <p class="mb-0"><strong>Controller:</strong> <span>Inspections</span></p>
                              </div>
                          </div>
                      </div>
                  </div>
              </div>
          </form>

          <div class="row mt-4">
              <div class="col-12">
                  <div class="d-flex justify-content-end gap-2">
                      <button type="button" class="btn btn-secondary" onclick="closeInspectionDeleteModal()">
                          <i class="bi bi-x-circle"></i> Cancel
                      </button>
                      <button type="submit" class="btn btn-danger" form="deleteForm">
                          <i class="bi bi-trash"></i>
                          <span class="submit-text">Delete Permanently</span>
                          <div class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></div>
                      </button>
                  </div>
              </div>
          </div>
      `;
      
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      
      // Add form submit handler
      document.getElementById('deleteForm').addEventListener('submit', function(e) {
          e.preventDefault();
          submitInspectionDeleteForm(this);
      });
  }

  function closeInspectionDeleteModal() {
      var modal = document.getElementById('deleteModal');
      modal.style.display = 'none';
      document.body.style.overflow = 'auto';
  }
  
  function submitInspectionDeleteForm(form) {
      var submitBtn = form.querySelector('button[type="submit"]');
      var spinner = submitBtn ? submitBtn.querySelector('.spinner-border') : null;
      var formErrors = document.getElementById('formErrors');
      var formSuccess = document.getElementById('formSuccess');
      
      // Show loading state
      if (submitBtn) submitBtn.disabled = true;
      if (spinner) spinner.style.display = 'inline-block';
      
      // Hide previous messages
      if (formErrors) formErrors.style.display = 'none';
      if (formSuccess) formSuccess.style.display = 'none';
      
      // Submit form via AJAX
      var formData = new FormData(form);
      
      fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
              'X-Requested-With': 'XMLHttpRequest'
          }
      })
      .then(response => {
          if (!response.ok) {
              throw new Error('Network response was not ok');
          }
          return response.text();
      })
      .then(result => {
          // Show success message
          if (formSuccess) {
              formSuccess.innerHTML = '<i class="bi bi-check-circle"></i> Inspection deleted successfully.';
              formSuccess.style.display = 'block';
          }
          
          // Close modal after short delay and reload page
          setTimeout(() => {
              closeInspectionDeleteModal();
              window.location.reload();
          }, 1500);
      })
      .catch(error => {
          console.error('Form submission error:', error);
          if (formErrors) {
              formErrors.innerHTML = '<i class="bi bi-exclamation-triangle"></i> An error occurred while deleting. Please try again.';
              formErrors.style.display = 'block';
          }
      })
      .finally(() => {
          if (submitBtn) submitBtn.disabled = false;
          if (spinner) spinner.style.display = 'none';
      });
  }

  // Close modals when clicking outside or pressing Escape
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      closeInspectionModal();
      closeInspectionDeleteModal();
    }
  });
</script>