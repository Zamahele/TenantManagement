@model IEnumerable<PropertyManagement.Web.ViewModels.LeaseAgreementViewModel>
@using PropertyManagement.Domain.Entities
@{
  ViewData["Title"] = "Lease Agreements";
  var tenants = ViewBag.Tenants as List<PropertyManagement.Web.ViewModels.TenantViewModel>;
  var expiringIds = ViewBag.ExpiringIds as List<int> ?? new List<int>();
  var overdueIds = ViewBag.OverdueIds as List<int> ?? new List<int>();
}

<div class="card shadow-lg" style="font-size: 1.15rem;">
  <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
    <div>
      <h2 class="mb-0 display-6"><i class="bi bi-file-earmark-text"></i> Lease Agreements</h2>
      <small class="opacity-75">Manage traditional and digital lease agreements</small>
    </div>
    <div>
      <a asp-controller="DigitalLease" asp-action="Templates" class="btn btn-outline-light me-2">
        <i class="bi bi-file-earmark-code"></i> Templates
      </a>
      <button class="btn btn-light text-primary fw-bold" onclick="loadLeaseAgreementModal(); return false;">
        <i class="bi bi-plus-circle"></i> Add Agreement
      </button>
    </div>
  </div>
  <div class="card-body p-4" style="background-color: #f8f9fa;">
    <div class="table-responsive">
      <table class="table table-striped table-bordered align-middle mb-0"
           id="leasesTable"
           data-datatable
           data-page-length="10"
           data-search-label="Search leases:"
           data-empty-message="No lease agreements found">
      <thead class="table-light">
        <tr>
          <th>Tenant</th>
          <th>Room</th>
          <th>Start Date</th>
          <th>End Date</th>
          <th>Rent (R)</th>
          <th>Rent Due</th>
          <th>Status</th>
          <th>Document</th>
          <th style="width: 150px;">Actions</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var agreement in Model)
        {
          var status = agreement.Status;
          var statusInfo = GetStatusInfo(status);
          var hasDigitalContent = !string.IsNullOrEmpty(agreement.GeneratedHtmlContent) || !string.IsNullOrEmpty(agreement.GeneratedPdfPath);
          var isDigitallySigned = agreement.IsDigitallySigned;

          <tr class="@(overdueIds.Contains(agreement.LeaseAgreementId) ? "table-danger" : expiringIds.Contains(agreement.LeaseAgreementId) ? "table-warning" : "")">
            <td>
              @agreement.Tenant?.FullName
              @if (isDigitallySigned)
              {
                <i class="bi bi-shield-check text-success ms-1" title="Digitally Signed"></i>
              }
            </td>
            <td>@agreement.Tenant?.Room?.Number</td>
            <td>@agreement.StartDate.ToString("dd MMM yyyy")</td>
            <td>
              @agreement.EndDate.ToString("dd MMM yyyy")
              @if (overdueIds.Contains(agreement.LeaseAgreementId))
              {
                <span class="badge bg-danger ms-2">Overdue</span>
              }
              else if (expiringIds.Contains(agreement.LeaseAgreementId))
              {
                <span class="badge bg-warning text-dark ms-2">Expiring Soon</span>
              }
            </td>
            <td class="fw-bold text-success">@agreement.RentAmount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("en-ZA"))</td>
            <td>@GetOrdinalNumber(agreement.ExpectedRentDay)</td>
            <td>
              <span class="badge @statusInfo.CssClass">@statusInfo.DisplayName</span>
            </td>
            <td>
              @if (hasDigitalContent && !string.IsNullOrEmpty(agreement.GeneratedPdfPath))
              {
                <a href="@agreement.GeneratedPdfPath" target="_blank" class="text-decoration-none">
                  <i class="bi bi-file-earmark-pdf text-danger"></i> Digital PDF
                </a>
              }
              else if (!string.IsNullOrEmpty(agreement.FilePath))
              {
                <a href="@agreement.FilePath" target="_blank" class="text-decoration-none">
                  <i class="bi bi-file-earmark-pdf text-primary"></i> Uploaded
                </a>
              }
              else
              {
                <span class="text-muted">No document</span>
              }
            </td>
            <td>
              <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  Actions
                </button>
                <ul class="dropdown-menu">
                  <!-- Traditional Actions -->
                  <li>
                    <a class="dropdown-item" href="#" onclick="loadLeaseAgreementModal(@agreement.LeaseAgreementId); return false;">
                      <i class="bi bi-pencil text-primary"></i> Edit Details
                    </a>
                  </li>
                  <li><hr class="dropdown-divider"></li>
                  
                  <!-- Digital Lease Actions -->
                  @if (status < LeaseAgreement.LeaseStatus.Generated)
                  {
                    <li>
                      <form asp-controller="DigitalLease" asp-action="GenerateLease" method="post" style="display: inline;" 
                            onsubmit="showGenerateSpinner(this, @agreement.LeaseAgreementId); return true;">
                        <input type="hidden" name="leaseAgreementId" value="@agreement.LeaseAgreementId" />
                        <button type="submit" class="dropdown-item" id="generate-btn-@agreement.LeaseAgreementId">
                          <i class="bi bi-gear text-info"></i> Generate Digital Lease
                        </button>
                      </form>
                    </li>
                  }
                  
                  @if (status == LeaseAgreement.LeaseStatus.Generated)
                  {
                    <li>
                      <form asp-controller="DigitalLease" asp-action="SendToTenant" method="post" style="display: inline;">
                        <input type="hidden" name="leaseAgreementId" value="@agreement.LeaseAgreementId" />
                        <button type="submit" class="dropdown-item">
                          <i class="bi bi-send text-warning"></i> Send to Tenant
                        </button>
                      </form>
                    </li>
                  }
                  
                  @if (hasDigitalContent)
                  {
                    <li>
                      <a class="dropdown-item" href="@Url.Action("PreviewLease", "DigitalLease", new { leaseAgreementId = agreement.LeaseAgreementId })" target="_blank">
                        <i class="bi bi-eye text-info"></i> Preview Digital Lease
                      </a>
                    </li>
                  }
                  
                  @if (isDigitallySigned)
                  {
                    <li>
                      <a class="dropdown-item" href="@agreement.GeneratedPdfPath" target="_blank">
                        <i class="bi bi-download text-success"></i> Download Signed PDF
                      </a>
                    </li>
                  }
                  
                  <li><hr class="dropdown-divider"></li>
                  <li>
                    <a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal-@agreement.LeaseAgreementId">
                      <i class="bi bi-trash"></i> Delete
                    </a>
                  </li>
                </ul>
              </div>
            </td>
          </tr>
          @await Html.PartialAsync(
              "_DeleteModal",
              new PropertyManagement.Web.ViewModels.DeleteModalViewModel {
                  ModalId = $"deleteModal-{agreement.LeaseAgreementId}",
                  ModalLabelId = $"deleteModalLabel-{agreement.LeaseAgreementId}",
                  Title = "Delete Lease",
                  Body = $"Are you sure you want to delete Lease for <strong>{agreement.Tenant?.FullName}</strong>? This action cannot be undone.",
                  Action = "Delete",
                  Controller = "LeaseAgreements",
                  EntityId = agreement.LeaseAgreementId
              }
          )
        }
      </tbody>
      </table>
    </div>
  </div>
</div>

<div id="leaseAgreementModalContainer"></div>

<!-- Lease Generation Loading Modal -->
<div class="modal fade" id="leaseGenerationModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h4 class="mt-3 mb-2">Generating Digital Lease</h4>
                <p class="text-muted mb-0">Please wait while we create your professional lease document...</p>
                <div class="progress mt-3" style="height: 6px;">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
  <script>
    function showGenerateSpinner(form, leaseId) {
        // Show the loading modal
        const modal = new bootstrap.Modal(document.getElementById('leaseGenerationModal'));
        modal.show();
        
        // Update the button to show it's processing
        const button = document.getElementById('generate-btn-' + leaseId);
        if (button) {
            const originalContent = button.innerHTML;
            button.innerHTML = '<i class="bi bi-hourglass-split text-info"></i> Generating...';
            button.disabled = true;
        }
        
        // The form will submit normally, and the page will reload showing the result
        return true;
    }

    function loadLeaseAgreementModal(id) {
        fetch('/LeaseAgreements/LeaseAgreementModal' + (id ? ('?id=' + id) : ''))
            .then(response => response.text())
            .then(html => {
                document.getElementById('leaseAgreementModalContainer').innerHTML = html;
                var modal = new bootstrap.Modal(document.getElementById('agreementModal'));
                modal.show();
            });
    }

    function updateRoomFields() {
      var tenantSelect = document.getElementById('TenantId');
      if (!tenantSelect) return;
      var tenantId = tenantSelect.value;
      if (!tenantId) {
        document.getElementById('RoomId').value = '';
        document.getElementById('RoomDisplay').value = '';
        return;
      }
      fetch('/LeaseAgreements/GetRoomIdByTenant?tenantId=' + tenantId)
        .then(response => response.json())
        .then(data => {
          document.getElementById('RoomId').value = data.roomId || '';
          var selectedOption = tenantSelect.options[tenantSelect.selectedIndex];
          var roomNumber = selectedOption.getAttribute('data-room-number') || '';
          document.getElementById('RoomDisplay').value = roomNumber;
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
      updateRoomFields();
    });
  </script>
  <partial name="_ValidationScriptsPartial" />
}

@functions {
    public string GetOrdinalNumber(int number)
    {
        var suffix = "th";
        if (number % 100 < 11 || number % 100 > 13)
        {
            switch (number % 10)
            {
                case 1: suffix = "st"; break;
                case 2: suffix = "nd"; break;
                case 3: suffix = "rd"; break;
            }
        }
        return $"{number}{suffix}";
    }

    public (string DisplayName, string CssClass) GetStatusInfo(LeaseAgreement.LeaseStatus status)
    {
        return status switch
        {
            LeaseAgreement.LeaseStatus.Draft => ("Draft", "bg-secondary"),
            LeaseAgreement.LeaseStatus.Generated => ("Generated", "bg-info"),
            LeaseAgreement.LeaseStatus.Sent => ("Awaiting Signature", "bg-warning text-dark"),
            LeaseAgreement.LeaseStatus.Signed => ("Signed", "bg-success"),
            LeaseAgreement.LeaseStatus.Completed => ("Completed", "bg-primary"),
            LeaseAgreement.LeaseStatus.Cancelled => ("Cancelled", "bg-danger"),
            _ => ("Unknown", "bg-secondary")
        };
    }
}