@model IEnumerable<PropertyManagement.Web.ViewModels.MaintenanceRequestViewModel>
@{
  ViewData["Title"] = "Maintenance Requests";
  var isManager = ViewBag.IsManager as bool? ?? false;
}

<!-- Page Header -->
<div class="page-header mb-4">
  <div class="d-flex justify-content-between align-items-center">
    <div class="page-title">
      <h1 class="page-title-main">
        <div class="page-icon">
          <i class="bi bi-tools"></i>
        </div>
        Maintenance Requests
      </h1>
      <p class="page-title-sub text-secondary mb-0">Track and manage maintenance requests across all properties</p>
    </div>
    <div class="page-actions">
      <div class="page-info text-end me-3">
        <div class="text-secondary small">Total Requests</div>
        <div class="fw-semibold">@Model.Count()</div>
      </div>
      @if (isManager)
      {
        <button class="btn btn-primary page-action-btn primary" onclick="openAddModal()">
          <i class="bi bi-plus-circle"></i>
          Add Request
        </button>
      }
      else
      {
        <a class="btn btn-primary page-action-btn primary"
           href="@Url.Action("SubmitTenantRequest", "Maintenance")">
          <i class="bi bi-plus-circle"></i>
          Add Request
        </a>
      }
    </div>
  </div>
</div>

<!-- Maintenance Requests Table Container -->
<div class="table-container">
  <div class="table-header">
    <h5 class="table-title">Maintenance Requests Management</h5>
    <p class="table-description">Monitor and track maintenance requests with status updates and assignment tracking</p>
  </div>
  <div class="table-responsive">
    <table class="table align-middle mb-0" id="maintenanceTable" 
           data-datatable
           data-page-length="15"
           data-search-label="Search maintenance requests:"
           data-empty-message="No maintenance requests found. Click 'Add Request' to get started.">
      <thead>
        <tr>
          <th>Reference #</th>
          <th>Room</th>
          <th>Description</th>
          <th>Status</th>
          <th>Assigned To</th>
          <th>Request Date</th>
          <th>Completed Date</th>
          <th class="text-center">Actions</th>
        </tr>
      </thead>
      <tbody>
        @if (Model.Any())
        {
          @foreach (var req in Model)
          {
            <tr>
              <td>
                <div class="fw-semibold text-primary">#@req.MaintenanceRequestId</div>
              </td>
              <td>
                <div class="d-flex align-items-center">
                  <div class="room-icon me-3">
                    <i class="bi bi-door-closed text-primary"></i>
                  </div>
                  <div>
                    <div class="fw-semibold text-primary">Room @(req.Room?.Number ?? "N/A")</div>
                    <div class="text-muted small">@(req.Room?.Type ?? "Unknown")</div>
                  </div>
                </div>
              </td>
              <td>
                <div class="description-preview">
                  @(req.Description.Length > 50 ? req.Description.Substring(0, 50) + "..." : req.Description)
                </div>
              </td>
              <td>
                @if (req.Status == "Completed")
                {
                  <span class="badge bg-success-subtle text-success-emphasis px-3 py-2 fw-semibold">
                    <i class="bi bi-check-circle me-1"></i>@req.Status
                  </span>
                }
                else if (req.Status == "In Progress")
                {
                  <span class="badge bg-warning-subtle text-warning-emphasis px-3 py-2 fw-semibold">
                    <i class="bi bi-clock me-1"></i>@req.Status
                  </span>
                }
                else if (req.Status == "Pending")
                {
                  <span class="badge bg-secondary-subtle text-secondary-emphasis px-3 py-2 fw-semibold">
                    <i class="bi bi-hourglass me-1"></i>@req.Status
                  </span>
                }
                else
                {
                  <span class="badge bg-light text-dark px-3 py-2 fw-semibold">@req.Status</span>
                }
              </td>
              <td>
                <div class="d-flex align-items-center">
                  <i class="bi bi-person me-2 text-muted"></i>
                  <span>@(req.AssignedTo ?? "Unassigned")</span>
                </div>
              </td>
              <td>
                <div class="fw-medium">@req.RequestDate.ToString("MMM dd, yyyy")</div>
                <div class="text-muted small">@req.RequestDate.ToString("dddd")</div>
              </td>
              <td>
                @if (req.CompletedDate.HasValue)
                {
                  <div class="fw-medium text-success">@req.CompletedDate.Value.ToString("MMM dd, yyyy")</div>
                  <div class="text-muted small">@req.CompletedDate.Value.ToString("dddd")</div>
                }
                else
                {
                  <span class="text-muted">-</span>
                }
              </td>
              <td class="text-center">
                @if (isManager)
                {
                  <div class="btn-group" role="group" aria-label="Maintenance request actions">
                    <button type="button" 
                            class="btn btn-sm btn-outline-primary" 
                            onclick="openEditModal(@req.MaintenanceRequestId)" 
                            title="Edit Maintenance Request">
                      <i class="bi bi-pencil-square"></i>
                    </button>
                    @await Html.PartialAsync(
                        "_DeleteModal",
                        new PropertyManagement.Web.ViewModels.DeleteModalViewModel {
                            ModalId = $"deleteModal-{req.MaintenanceRequestId}",
                            ModalLabelId = $"deleteModalLabel-{req.MaintenanceRequestId}",
                            Title = "Delete Maintenance Request",
                            Body = $"Are you sure you want to delete maintenance request <strong>#{req.MaintenanceRequestId}</strong> for <strong>Room {req.Room?.Number ?? "N/A"}</strong>?",
                            Action = "Delete",
                            Controller = "Maintenance",
                            EntityId = req.MaintenanceRequestId
                        }
                    )
                  </div>
                }
                else
                {
                  <span class="text-muted small">View Only</span>
                }
              </td>
            </tr>
          }
        }
      </tbody>
    </table>
  </div>
</div>

<!-- Custom Maintenance Request Modal -->
<div id="maintenanceModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeMaintenanceModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h4 class="custom-modal-title">
        <i class="bi bi-tools me-2"></i>
        <span id="maintenanceModalTitle">Add Maintenance Request</span>
      </h4>
      <button type="button" class="custom-modal-close" onclick="closeMaintenanceModal()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    <div class="custom-modal-body" id="maintenanceModalBody">
      <div class="loading-state">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading form...</p>
      </div>
    </div>
  </div>
</div>
@section Styles {
  <style>
    /* Custom Modal Styles */
    .custom-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1050;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .custom-modal-backdrop {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.4);
    }
    
    .custom-modal-content {
      position: relative;
      background: white;
      border-radius: 8px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow: hidden;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      border: 1px solid #dee2e6;
      z-index: 1051;
    }
    
    .custom-modal-header {
      background: #f8f9fa;
      color: #495057;
      padding: 1.25rem 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #dee2e6;
    }
    
    .custom-modal-title {
      margin: 0;
      font-size: 1.125rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      color: #212529;
    }
    
    .custom-modal-close {
      background: none;
      border: none;
      color: #6c757d;
      font-size: 1.25rem;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 4px;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.15s ease;
    }
    
    .custom-modal-close:hover {
      background-color: #e9ecef;
      color: #495057;
    }
    
    .custom-modal-body {
      padding: 1.5rem;
      max-height: calc(90vh - 100px);
      overflow-y: auto;
    }
    
    .loading-state {
      text-align: center;
      padding: 3rem 0;
    }
    
    .description-preview {
      max-width: 200px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    /* Responsive Design */
    @@media (max-width: 768px) {
      .custom-modal-content {
        width: 95%;
        max-height: 95vh;
        margin: 1rem;
      }
      
      .custom-modal-header {
        padding: 1rem 1.5rem;
      }
      
      .custom-modal-body {
        padding: 1.5rem;
        max-height: calc(95vh - 100px);
      }
      
      .custom-modal-title {
        font-size: 1.1rem;
      }
    }
    
    /* Smooth scrollbar for modal body */
    .custom-modal-body::-webkit-scrollbar {
      width: 6px;
    }
    
    .custom-modal-body::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb:hover {
      background: #a1a1a1;
    }
  </style>
}

@section Scripts {
  <script>
    function getAntiForgeryToken() {
        return $('input[name="__RequestVerificationToken"]').val();
    }

    function openAddModal() {
        loadMaintenanceForm('Add Maintenance Request', '/Maintenance/MaintenanceRequestForm');
    }
    
    function openEditModal(id) {
        loadMaintenanceForm('Edit Maintenance Request', '/Maintenance/MaintenanceRequestForm?id=' + id);
    }

    function loadMaintenanceForm(title, url) {
        // Show loading state
        document.getElementById('maintenanceModalTitle').innerText = title;
        document.getElementById('maintenanceModalBody').innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="mt-2">Loading form...</div>
            </div>`;
        
        // Show modal
        document.getElementById('maintenanceModal').style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Load form content
        fetch(url, {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken(),
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('maintenanceModalBody').innerHTML = html;
            initializeMaintenanceForm();
        })
        .catch(error => {
            console.error('Error loading form:', error);
            document.getElementById('maintenanceModalBody').innerHTML = `
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> 
                    Error loading form. Please try again.
                </div>`;
        });
    }

    function initializeMaintenanceForm() {
        // Initialize form after it's loaded into modal
        var form = document.getElementById('maintenanceRequestForm');
        
        // Handle form submission via AJAX
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                submitMaintenanceForm(form);
            });
        }
        
        // Enable Bootstrap validation
        if (form) {
            form.classList.add('needs-validation');
        }
    }

    function submitMaintenanceForm(form) {
        var submitButton = document.querySelector('button[form="maintenanceRequestForm"]') || (form ? form.querySelector('button[type="submit"]') : null);
        var spinner = submitButton ? submitButton.querySelector('.spinner-border') : null;
        var errorDiv = document.getElementById('formErrors');
        var successDiv = document.getElementById('formSuccess');
        
        if (!form) {
            console.error('❌ Form not found!');
            return;
        }
        
        if (!submitButton) {
            console.error('❌ Submit button not found!');
            return;
        }
        
        // Show loading state
        submitButton.disabled = true;
        if (spinner) {
            spinner.style.display = 'inline-block';
        }
        if (errorDiv) errorDiv.style.display = 'none';
        if (successDiv) successDiv.style.display = 'none';
        
        // Validate form
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            submitButton.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
            return;
        }
        
        // Submit form
        var formData = new FormData(form);
        
        fetch('/Maintenance/CreateOrEdit', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || 'Server error');
                });
            }
            return response.json();
        })
        .then(result => {
            if (result.success) {
                // Show success message
                if (successDiv) {
                    successDiv.innerHTML = '<i class="bi bi-check-circle"></i> ' + result.message;
                    successDiv.style.display = 'block';
                }
                
                // Close modal after short delay
                setTimeout(() => {
                    closeMaintenanceModal();
                    
                    // Refresh the page to show updated data
                    window.location.reload();
                }, 1500);
            } else {
                // Show error messages
                var errors = Array.isArray(result.errors) ? result.errors : [result.message || 'An error occurred'];
                if (errorDiv) {
                    errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> ' + errors.join('<br>');
                    errorDiv.style.display = 'block';
                }
            }
        })
        .catch(error => {
            console.error('Form submission error:', error);
            if (errorDiv) {
                errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> An error occurred while saving. Please try again.';
                errorDiv.style.display = 'block';
            }
        })
        .finally(() => {
            submitButton.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
        });
    }

    function closeMaintenanceModal() {
        document.getElementById('maintenanceModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }
  </script>
}