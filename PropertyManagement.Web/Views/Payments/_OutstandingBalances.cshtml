@model List<PropertyManagement.Web.ViewModels.TenantViewModel>

<div class="mb-4 p-3 rounded shadow-sm" style="background-color: #f4f6fb;">
  @{
    ViewData["SearchId"] = "balances-search";
    ViewData["SearchPlaceholder"] = "Search by tenant name or room...";
  }
  @await Html.PartialAsync("_TableSearch")

  <div class="table-responsive">
    <table class="table table-striped table-bordered align-middle mb-0"
           id="balancesTable"
           data-datatable
           data-page-length="8"
           data-search-label="Search balances:"
           data-empty-message="No outstanding balances found"
>
      <thead class="table-light">
        <tr>
          <th>Tenant</th>
          <th>Room</th>
          <th>Outstanding Balance</th>
          <th>Outstanding Months</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var tenant in Model)
        {
          var lease = tenant.LeaseAgreements?
          .OrderByDescending(l => l.StartDate)
          .FirstOrDefault(l => l.StartDate <= DateTime.Today && l.EndDate >= DateTime.Today);

          decimal expectedRent = lease?.RentAmount ?? 0m;

          var rentPayments = tenant.Payments?.Where(p => p.Type == "Rent").ToList() ?? new List<PropertyManagement.Web.ViewModels.PaymentViewModel>();

          var months = new List<(int Year, int Month)>();
          int currentYear = DateTime.Today.Year;
          int currentMonth = DateTime.Today.Month;
          for (int m = 1; m <= currentMonth; m++)
          {
            months.Add((currentYear, m));
          }

          int outstandingMonths = 0;
          decimal outstandingAmount = 0m;

          var paymentLookup = rentPayments
          .GroupBy(p => (p.PaymentYear, p.PaymentMonth))
          .ToDictionary(g => g.Key, g => g.OrderByDescending(p => p.Date).FirstOrDefault());

          if (expectedRent > 0)
          {
            foreach (var m in months)
            {
              var paid = rentPayments
              .Where(p => p.PaymentYear == m.Year && p.PaymentMonth == m.Month)
              .Sum(p => p.Amount);

              if (paid < expectedRent)
              {
                outstandingMonths++;
                outstandingAmount += (expectedRent - paid);
              }
            }
          }

          <tr>
            <td>@tenant.FullName</td>
            <td>@tenant.Room?.Number</td>
            <td>@(outstandingAmount > 0 ? outstandingAmount.ToString("C") : "-")</td>
            <td>@(outstandingMonths > 0 ? outstandingMonths.ToString() : "-")</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="historyDropdown-@tenant.TenantId" data-bs-toggle="dropdown" aria-expanded="false">
                  Actions
                </button>
                <ul class="dropdown-menu" aria-labelledby="historyDropdown-@tenant.TenantId">
                  <li>
                    <a class="dropdown-item" href="#" onclick="showPaymentHistory(@tenant.TenantId, '@tenant.FullName'); return false;">
                      <i class="bi bi-clock-history"></i> View History
                    </a>
                  </li>
                </ul>
              </div>
            </td>
          </tr>
          <!-- Store payment history data in hidden div for modal display -->
          <div id="history-data-@tenant.TenantId" style="display: none;">
            @foreach (var m in months)
            {
              var key = (m.Year, m.Month);
              if (paymentLookup.ContainsKey(key))
              {
                var p = paymentLookup[key];
                <div class="payment-record" data-date="@p.Date.ToShortDateString()" data-type="@p.Type" data-amount="@p.Amount.ToString("C")" data-month="@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(p.PaymentMonth) @p.PaymentYear"></div>
              }
              else
              {
                <div class="payment-record missing" data-month="@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m.Month) @m.Year" data-status="No payment recorded"></div>
              }
            }
          </div>
        }
      </tbody>
    </table>
  </div>
</div>

<!-- Payment History Modal -->
<div class="modal fade" id="paymentHistoryModal" tabindex="-1" aria-labelledby="paymentHistoryModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="paymentHistoryModalLabel">
          <i class="bi bi-clock-history"></i> Payment History
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="paymentHistoryContent">
        <!-- Payment history will be loaded here -->
      </div>
    </div>
  </div>
</div>

<script>
function showPaymentHistory(tenantId, tenantName) {
    // Get payment history data from hidden div
    var historyData = document.getElementById('history-data-' + tenantId);
    var content = '<h6>Payment History for ' + tenantName + '</h6><ul class="list-group list-group-flush">';
    
    if (historyData) {
        var records = historyData.querySelectorAll('.payment-record');
        records.forEach(function(record) {
            if (record.classList.contains('missing')) {
                content += '<li class="list-group-item text-danger fw-bold">' + 
                          record.getAttribute('data-month') + ' - ' + record.getAttribute('data-status') + '</li>';
            } else {
                content += '<li class="list-group-item">' + 
                          record.getAttribute('data-date') + ' - ' + 
                          record.getAttribute('data-type') + ' - ' + 
                          record.getAttribute('data-amount') + ' (' + 
                          record.getAttribute('data-month') + ')</li>';
            }
        });
    }
    
    content += '</ul>';
    
    // Show modal with content
    document.getElementById('paymentHistoryContent').innerHTML = content;
    var modal = new bootstrap.Modal(document.getElementById('paymentHistoryModal'));
    modal.show();
}
</script>