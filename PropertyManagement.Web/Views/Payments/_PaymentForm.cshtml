@model PropertyManagement.Web.ViewModels.PaymentViewModel
@{
    var tenants = ViewBag.Tenants as List<PropertyManagement.Web.ViewModels.TenantViewModel>;
    var isEdit = Model.PaymentId.HasValue && Model.PaymentId > 0;
    var actionUrl = isEdit ? "/Payments/Edit" : "/Payments/Create";
}

<form id="paymentForm" action="@actionUrl" method="post" enctype="multipart/form-data">
    @if (isEdit)
    {
        <input type="hidden" asp-for="PaymentId" />
    }
    
    <!-- Tenant Selection -->
    <div class="mb-3">
        <label asp-for="TenantId" class="form-label fw-bold">
            <i class="bi bi-person-fill text-primary me-1"></i>Tenant
        </label>
        <select name="TenantId" class="form-select" required @Html.Raw(isEdit ? "disabled" : "")>
            <option value="">-- Select Tenant --</option>
            @if (tenants != null)
            {
                @foreach (var tenant in tenants)
                {
                    <option value="@tenant.TenantId" 
                            data-room="@tenant.Room?.Number" 
                            selected="@(Model.TenantId == tenant.TenantId)">
                        @tenant.FullName (@tenant.Room?.Number)
                    </option>
                }
            }
        </select>
        @if (isEdit)
        {
            <input type="hidden" asp-for="TenantId" />
        }
        <div class="form-text">Select the tenant making this payment</div>
    </div>

    <!-- Amount -->
    <div class="mb-3">
        <label asp-for="Amount" class="form-label fw-bold">
            <i class="bi bi-cash-coin text-success me-1"></i>Amount (R)
        </label>
        <input asp-for="Amount" class="form-control" type="number" step="0.01" min="0" required placeholder="0.00" />
        <div class="form-text">Enter the payment amount in South African Rands</div>
    </div>

    <!-- Payment Type -->
    <div class="mb-3">
        <label asp-for="Type" class="form-label fw-bold">
            <i class="bi bi-tag-fill text-info me-1"></i>Payment Type
        </label>
        <select asp-for="Type" class="form-select" required>
            <option value="">-- Select Payment Type --</option>
            <option value="Rent" selected="@(Model.Type == "Rent")">Monthly Rent</option>
            <option value="Deposit" selected="@(Model.Type == "Deposit")">Security Deposit</option>
            <option value="Utilities" selected="@(Model.Type == "Utilities")">Utilities</option>
            <option value="Late Fee" selected="@(Model.Type == "Late Fee")">Late Fee</option>
            <option value="Other" selected="@(Model.Type == "Other")">Other</option>
        </select>
        <div class="form-text">Specify what this payment is for</div>
    </div>

    <!-- Payment Period (Month & Year) -->
    <div class="row mb-3">
        <div class="col-md-6">
            <label asp-for="PaymentMonth" class="form-label fw-bold">
                <i class="bi bi-calendar-month text-warning me-1"></i>Payment Month
            </label>
            <select asp-for="PaymentMonth" class="form-select" required>
                <option value="">-- Select Month --</option>
                @for (int month = 1; month <= 12; month++)
                {
                    var monthName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                    <option value="@month" selected="@(Model.PaymentMonth == month)">@monthName</option>
                }
            </select>
        </div>
        <div class="col-md-6">
            <label asp-for="PaymentYear" class="form-label fw-bold">
                <i class="bi bi-calendar-year text-warning me-1"></i>Payment Year
            </label>
            <select asp-for="PaymentYear" class="form-select" required>
                <option value="">-- Select Year --</option>
                @{
                    int currentYear = DateTime.Now.Year;
                    for (int year = currentYear - 1; year <= currentYear + 1; year++)
                    {
                        <option value="@year" selected="@(Model.PaymentYear == year)">@year</option>
                    }
                }
            </select>
        </div>
    </div>

    <!-- Payment Date (Read-only for new payments) -->
    <div class="mb-3">
        <label asp-for="Date" class="form-label fw-bold">
            <i class="bi bi-calendar-event text-secondary me-1"></i>Payment Date
        </label>
        @if (isEdit)
        {
            <input asp-for="Date" class="form-control" type="date" />
        }
        else
        {
            <input asp-for="Date" class="form-control" type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
            <div class="form-text">Payment date is automatically set to today for new payments</div>
        }
    </div>

    <!-- Receipt Upload (Optional) -->
    <div class="mb-3">
        <label for="receiptFile" class="form-label fw-bold">
            <i class="bi bi-receipt text-primary me-1"></i>Payment Receipt (Optional)
        </label>
        <input type="file" id="receiptFile" name="receiptFile" class="form-control" accept=".pdf,.jpg,.jpeg,.png" />
        <div class="form-text">Upload a receipt or proof of payment (PDF, JPG, PNG - Max 5MB)</div>
        @if (!string.IsNullOrEmpty(Model.ReceiptPath))
        {
            <div class="mt-2">
                <small class="text-success">
                    <i class="bi bi-check-circle me-1"></i>Current receipt: 
                    <a href="@Model.ReceiptPath" target="_blank" class="text-decoration-none">View Receipt</a>
                </small>
            </div>
        }
    </div>

    <!-- Form Buttons -->
    <div class="d-flex justify-content-end gap-2 pt-2 border-top">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
            <i class="bi bi-x-circle me-1"></i>Cancel
        </button>
        <button type="submit" class="btn btn-primary" id="submitBtn">
            <i class="bi bi-@(isEdit ? "check" : "plus")-circle me-1"></i>
            @(isEdit ? "Update Payment" : "Add Payment")
        </button>
    </div>

    @Html.AntiForgeryToken()
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('paymentForm');
    const submitBtn = document.getElementById('submitBtn');
    
    // Form validation
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Disable submit button to prevent double submission
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Processing...';
        
        // Submit form via fetch to handle AJAX response
        const formData = new FormData(form);
        
        fetch(form.action, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (response.ok) {
                // Close modal and reload page to show success message
                bootstrap.Modal.getInstance(document.getElementById('paymentModal')).hide();
                window.location.reload();
            } else {
                throw new Error('Server error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while processing the payment. Please try again.');
            
            // Re-enable submit button
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="bi bi-@(isEdit ? "check" : "plus")-circle me-1"></i>@(isEdit ? "Update Payment" : "Add Payment")';
        });
    });
    
    // Auto-populate rent amount based on tenant selection (if available)
    const tenantSelect = document.querySelector('select[name="TenantId"]');
    const amountInput = document.querySelector('input[name="Amount"]');
    const typeSelect = document.querySelector('select[name="Type"]');
    
    if (tenantSelect && amountInput && typeSelect && !@(isEdit ? "true" : "false")) {
        tenantSelect.addEventListener('change', function() {
            // You can add logic here to auto-populate rent amount based on tenant's lease agreement
            // For now, just ensure rent type is selected when tenant changes
            if (this.value && typeSelect.value === '') {
                typeSelect.value = 'Rent';
            }
        });
    }
});
</script>