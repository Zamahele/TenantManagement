@model IEnumerable<PropertyManagement.Web.ViewModels.PaymentViewModel>
@{
  var tenants = ViewBag.Tenants as List<PropertyManagement.Web.ViewModels.TenantViewModel>;
  var currentYear = DateTime.Now.Year;
  var currentMonth = DateTime.Now.Month;
}
<div class="mt-0 mb-4 p-4" style="background-color: #f8f9fa; border-radius: 0 0 .5rem .5rem;">
  <form asp-action="Create" method="post" class="row g-2 align-items-center mb-4">    
    <div class="col-12 col-md-auto">
      <select name="PaymentYear" class="form-select" required>
        <option value="">Year</option>
        @for (int y = DateTime.Now.Year - 1; y <= DateTime.Now.Year + 1; y++)
        {
          if (y == currentYear) {
            <option value="@y" selected>@y</option>
          } else {
            <option value="@y">@y</option>
          }
        }
      </select>
    </div>
    <div class="col-12 col-md-auto">
      <select name="PaymentMonth" class="form-select" required>
        <option value="">Month</option>
        @for (int m = 1; m <= 12; m++)
        {
          if (m == currentMonth) {
            <option value="@m" selected>@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
          } else {
            <option value="@m">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
          }
        }
      </select>
    </div>
    <div class="col-12 col-md-auto">
      <select name="TenantId" class="form-select" required>
        <option value="">Select Tenant</option>
        @if (tenants != null)
        {
          foreach (var tenant in tenants)
          {
            <option value="@tenant.TenantId" 
                    data-room="@tenant.Room?.Number">@tenant.FullName (@tenant.Room?.Number)</option>
          }
        }
      </select>
    </div>
    <div class="col-12 col-md-auto">
      <input name="Amount" class="form-control" placeholder="Amount" required type="number" min="0.01" step="any" />
    </div>
    <div class="col-12 col-md-auto">
      <select name="Type" class="form-select" required>
        <option value="">Select Payment Type</option>
        <option value="Rent" selected>Rent</option>
        <option value="Deposit">Deposit</option>
        <option value="Other">Other</option>
      </select>
    </div>
    <div class="col-12 col-md-auto">
      <button type="submit" class="btn btn-primary w-100">
        <i class="bi bi-plus-circle"></i> Add Payment
      </button>
    </div>
  </form>

  <table id="paymentsTable" 
         class="table table-striped table-bordered align-middle mb-0" 
         data-datatable
         data-page-length="10"
         data-search-label="Search payments:"
         data-empty-message="No payments found"
         style="width:100%">
    <thead class="table-light">
      <tr>
        <th>Tenant</th>
        <th>Room</th>
        <th>Amount</th>
        <th>Type</th>
        <th>Date</th>
        <th>Month</th>
        <th>Year</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var payment in Model.Where(p => p.Tenant != null).OrderByDescending(p => p.Date))
      {
        <tr>
          <td>@payment.Tenant.FullName</td>
          <td>@payment.Tenant.Room?.Number</td>
          <td>@payment.Amount.ToString("C")</td>
          <td>@payment.Type</td>
          <td data-order="@(payment.Date != DateTime.MinValue ? payment.Date.ToString("yyyy-MM-dd") : "")">
            @(payment.Date != DateTime.MinValue ? payment.Date.ToShortDateString() : "No date")
          </td>
          <td>
            @(payment.PaymentMonth >= 1 && payment.PaymentMonth <= 12
                      ? System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(payment.PaymentMonth)
                      : "Invalid")
          </td>
          <td>@payment.PaymentYear</td>
          <td class="text-center">
            <div class="btn-group" role="group" aria-label="Payment actions">
              <button type="button" 
                      class="btn btn-sm btn-outline-primary" 
                      data-bs-toggle="modal" 
                      data-bs-target="#editModal-@payment.PaymentId" 
                      title="Edit Payment">
                <i class="bi bi-pencil-square"></i>
              </button>
              <button type="button" 
                      class="btn btn-sm btn-outline-info" 
                      onclick="showReceiptModal(@payment.PaymentId)" 
                      title="View Receipt">
                <i class="bi bi-receipt-cutoff"></i>
              </button>
              <button type="button" 
                      class="btn btn-sm btn-outline-danger" 
                      onclick="openDeleteModal(@payment.PaymentId, '@payment.Tenant?.FullName', 'Payment: @payment.Amount.ToString("C") for @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(payment.PaymentMonth) @payment.PaymentYear')" 
                      title="Delete Payment">
                <i class="bi bi-trash-fill"></i>
              </button>
            </div>
          </td>
        </tr>
        @await Html.PartialAsync("_PaymentModals", payment)
      }
    </tbody>
  </table>
</div>
<div class="modal fade" id="receiptModal" tabindex="-1" aria-labelledby="receiptModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="receiptModalLabel"><i class="bi bi-receipt"></i> Payment Receipt</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="receiptModalBody">
        <!-- Receipt content will be loaded here -->
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  // Tenant lease data for auto-population in payments table
  var tenantLeases = @Html.Raw(Json.Serialize(ViewBag.TenantLeases ?? new List<object>()));
  
  
  document.addEventListener('DOMContentLoaded', function() {
    initializePaymentsTableAutoPopulation();
  });
  
  function initializePaymentsTableAutoPopulation() {
    var tenantSelect = document.querySelector('select[name="TenantId"]');
    var amountInput = document.querySelector('input[name="Amount"]');
    var typeSelect = document.querySelector('select[name="Type"]');
    
    if (tenantSelect && amountInput) {
      tenantSelect.addEventListener('change', function() {
        var tenantId = parseInt(this.value);
        
        if (tenantId && tenantLeases) {
          var tenantLease = tenantLeases.find(t => t.tenantId === tenantId);
          
          if (tenantLease) {
            if (tenantLease.hasActiveLease && tenantLease.monthlyRent > 0) {
              // Set amount to monthly rent from lease - try different formats
              var rentAmount = parseFloat(tenantLease.monthlyRent);
              
              // Try setting as integer if it's a whole number, otherwise use minimal decimal places
              var amountStr = (rentAmount % 1 === 0) ? rentAmount.toString() : rentAmount.toFixed(2);
              
              amountInput.value = amountStr;
              
              // Also set the HTML attribute
              amountInput.setAttribute('value', amountStr);
              
            } else {
              // No active lease, leave amount empty for manual entry
              amountInput.value = '';
              amountInput.removeAttribute('value');
            }
            
            // Set payment type to Rent if not already set
            if (typeSelect && typeSelect.value === '') {
              typeSelect.value = 'Rent';
            }
            
            // Trigger validation events to clear any validation errors (with small delay)
            setTimeout(function() {
              amountInput.dispatchEvent(new Event('input', { bubbles: true }));
              amountInput.dispatchEvent(new Event('change', { bubbles: true }));
              
              if (typeSelect) {
                typeSelect.dispatchEvent(new Event('change', { bubbles: true }));
              }
              
              // Clear any validation errors by triggering validation
              if (typeof $ !== 'undefined' && $.fn.valid) {
                $(amountInput).closest('form').valid();
              }
            }, 50);
          }
        } else {
          // No tenant selected, reset to default
          amountInput.value = '';
        }
      });
    }
  }
</script>

