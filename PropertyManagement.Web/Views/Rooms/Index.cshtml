@model RoomsTabViewModel
@using Microsoft.AspNetCore.Mvc.Rendering
@using PropertyManagement.Domain.Entities
@using PropertyManagement.Web.ViewModels
@{
  ViewData["Title"] = "Rooms";
}

<!-- Page Header -->
<div class="page-header mb-4">
  <div class="d-flex justify-content-between align-items-center">
    <div class="page-title">
      <h1 class="page-title-main">
        <div class="page-icon">
          <i class="bi bi-door-closed"></i>
        </div>
        Rooms Dashboard
      </h1>
      <p class="page-title-sub text-secondary mb-0">Manage room availability, maintenance status, and booking requests</p>
    </div>
    <div class="page-actions">
      <div class="d-flex align-items-center gap-3">
        <div class="page-info text-center">
          <div class="text-secondary small">Total Rooms</div>
          <div class="fw-semibold">@Model.AllRooms.Count()</div>
        </div>
        <div class="page-info text-center">
          <div class="text-secondary small">Occupied</div>
          <div class="fw-semibold text-info">@Model.OccupiedRooms.Count()</div>
        </div>
        <div class="page-info text-center">
          <div class="text-secondary small">Available</div>
          <div class="fw-semibold text-success">@Model.VacantRooms.Count()</div>
        </div>
        <button class="btn btn-primary page-action-btn primary" onclick="openAddModal()">
          <i class="bi bi-plus-circle"></i>
          Add Room
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Room Management Container -->
<div class="content-section">
  <div class="card-elevated">
    <!-- Professional Tab Navigation -->
    <div class="nav-tabs-container">
      <ul class="nav nav-tabs nav-tabs-professional" id="roomTabs" role="tablist">
        <li class="nav-item" role="presentation">
          <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab">
            <i class="bi bi-grid-3x3-gap me-2"></i>
            All Rooms
            <span class="nav-badge">@Model.AllRooms.Count()</span>
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="occupied-tab" data-bs-toggle="tab" data-bs-target="#occupied" type="button" role="tab">
            <i class="bi bi-house-lock me-2"></i>
            Occupied
            <span class="nav-badge bg-info">@Model.OccupiedRooms.Count()</span>
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="vacant-tab" data-bs-toggle="tab" data-bs-target="#vacant" type="button" role="tab">
            <i class="bi bi-house-check me-2"></i>
            Available
            <span class="nav-badge bg-success">@Model.VacantRooms.Count()</span>
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="maintenance-tab" data-bs-toggle="tab" data-bs-target="#maintenance" type="button" role="tab">
            <i class="bi bi-wrench-adjustable me-2"></i>
            Maintenance
            <span class="nav-badge bg-warning">@Model.MaintenanceRooms.Count()</span>
          </button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="requests-tab" data-bs-toggle="tab" data-bs-target="#requests" type="button" role="tab">
            <i class="bi bi-bell me-2"></i>
            Requests
            @if (Model.PendingRequestCount > 0)
            {
              <span class="nav-badge bg-danger">
                @Model.PendingRequestCount
              </span>
            }
            else
            {
              <span class="nav-badge">0</span>
            }
          </button>
        </li>
      </ul>
    </div>
    <div class="tab-content" id="roomTabsContent">
      <div class="tab-pane fade show active" id="all" role="tabpanel">
        @{ ViewData["TabId"] = "all"; }
        @Html.Partial("_RoomTable", Model.AllRooms, ViewData)
      </div>
      <div class="tab-pane fade" id="occupied" role="tabpanel">
        @{ ViewData["TabId"] = "occupied"; }
        @Html.Partial("_RoomTable", Model.OccupiedRooms, ViewData)
      </div>
      <div class="tab-pane fade" id="vacant" role="tabpanel">
        @{ ViewData["TabId"] = "vacant"; }
        @Html.Partial("_RoomTable", Model.VacantRooms, ViewData)
      </div>
      <div class="tab-pane fade" id="maintenance" role="tabpanel">
        @{ ViewData["TabId"] = "maintenance"; }
        @Html.Partial("_RoomTable", Model.MaintenanceRooms, ViewData)
      </div>
      <div class="tab-pane fade" id="requests" role="tabpanel">
        @Html.Partial("_BookingRequestsTable", Model.PendingBookingRequests)
      </div>
    </div>
  </div>
</div>

<!-- Custom Room Modal -->
<div id="roomModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeRoomModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h4 class="custom-modal-title">
        <i class="bi bi-door-closed me-2"></i>
        <span id="roomModalLabel">Add Room</span>
      </h4>
      <button type="button" class="custom-modal-close" onclick="closeRoomModal()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    <div class="custom-modal-body" id="roomModalBody">
      @Html.Partial("_RoomModal", new RoomFormViewModel { StatusOptions = Model.StatusOptions.Where(s => s.Value == "Available"), RoomTypes = Model.RoomTypes })
    </div>
  </div>
</div>

<div id="bookingModalContainer"></div>

<!-- Custom Delete Modal -->
<div id="deleteModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeDeleteModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h4 class="custom-modal-title">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        <span id="deleteModalTitle">Confirm Delete</span>
      </h4>
      <button type="button" class="custom-modal-close" onclick="closeDeleteModal()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    <div class="custom-modal-body" id="deleteModalBody">
      <!-- Delete form content will be loaded here -->
    </div>
  </div>
</div>

@section Styles {
  <style>
    /* Custom Modal Styles */
    .custom-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1050;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .custom-modal-backdrop {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.4);
    }
    
    .custom-modal-content {
      position: relative;
      background: white;
      border-radius: 8px;
      width: 90%;
      max-width: 900px;
      max-height: 90vh;
      overflow: hidden;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      border: 1px solid #dee2e6;
      z-index: 1051;
    }
    
    .custom-modal-header {
      background: #f8f9fa;
      color: #495057;
      padding: 1.25rem 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #dee2e6;
    }
    
    .custom-modal-title {
      margin: 0;
      font-size: 1.125rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      color: #212529;
    }
    
    .custom-modal-close {
      background: none;
      border: none;
      color: #6c757d;
      font-size: 1.25rem;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 4px;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.15s ease;
    }
    
    .custom-modal-close:hover {
      background-color: #e9ecef;
      color: #495057;
    }
    
    .custom-modal-body {
      padding: 1.5rem;
      max-height: calc(90vh - 100px);
      overflow-y: auto;
    }
    
    /* Responsive Design */
    @@media (max-width: 768px) {
      .custom-modal-content {
        width: 95%;
        max-height: 95vh;
        margin: 1rem;
      }
      
      .custom-modal-header {
        padding: 1rem 1.5rem;
      }
      
      .custom-modal-body {
        padding: 1.5rem;
        max-height: calc(95vh - 100px);
      }
      
      .custom-modal-title {
        font-size: 1.1rem;
      }
    }
    
    /* Smooth scrollbar for modal body */
    .custom-modal-body::-webkit-scrollbar {
      width: 6px;
    }
    
    .custom-modal-body::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb:hover {
      background: #a1a1a1;
    }
  </style>
}

@section Scripts {
  <script>
    // Get CSRF token for AJAX requests
    function getAntiForgeryToken() {
        return $('input[name="__RequestVerificationToken"]').val();
    }
    
    function openAddModal() {
        document.getElementById('roomForm').reset();
        document.getElementById('RoomId').value = 0;
        document.getElementById('roomModalLabel').innerText = 'Add Room';
        document.getElementById('roomModal').style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    function openEditModal(id) {
        fetch('/Rooms/GetRoom/' + id)
            .then(response => response.json())
            .then(data => {
                document.getElementById('roomForm').reset();
                if (document.getElementById('RoomId')) document.getElementById('RoomId').value = data.roomId;
                if (document.getElementById('Number')) document.getElementById('Number').value = data.number;
                if (document.getElementById('Type')) document.getElementById('Type').value = data.type;
                if (document.getElementById('Status')) document.getElementById('Status').value = data.status;
                if (document.getElementById('CottageId')) document.getElementById('CottageId').value = data.cottageId || '';
                document.getElementById('roomModalLabel').innerText = 'Edit Room';
                document.getElementById('roomModal').style.display = 'flex';
                document.body.style.overflow = 'hidden';
            });
    }
    
    function closeRoomModal() {
        document.getElementById('roomModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }
    
    function deleteRoom(id, roomNumber) {
        openDeleteModal(id, 'Delete', 'Rooms', `Are you sure you want to delete room <strong>${roomNumber}</strong>?`, 'Delete Room');
    }
    
    // Delete Modal Functions (consistent with lease agreements)
    function openDeleteModal(entityId, action, controller, body, title) {
        var modal = document.getElementById('deleteModal');
        var modalTitle = document.getElementById('deleteModalTitle');
        var modalBody = document.getElementById('deleteModalBody');
        
        modalTitle.textContent = title || 'Confirm Delete';
        
        // Create delete form content with professional styling
        modalBody.innerHTML = `
            <!-- Form Error Display -->
            <div id="formErrors" class="alert alert-danger" style="display: none;"></div>
            <div id="formSuccess" class="alert alert-success" style="display: none;"></div>

            <form id="deleteForm" action="/${controller}/${action}" method="post" class="needs-validation" novalidate>
                <input name="__RequestVerificationToken" type="hidden" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                <input type="hidden" name="id" value="${entityId}" />
                
                <div class="row g-4">
                    <div class="col-12">
                        <div class="alert alert-danger border-danger">
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-exclamation-triangle-fill text-danger fs-2 me-3"></i>
                                <div>
                                    <h5 class="alert-heading mb-1 text-danger">${title}</h5>
                                    <p class="mb-0">This action cannot be undone.</p>
                                </div>
                            </div>
                            
                            <div class="mb-0">${body}</div>
                        </div>
                        
                        <div class="card border-info bg-light">
                            <div class="card-body p-3">
                                <h6 class="card-title text-info mb-2">
                                    <i class="bi bi-info-circle"></i> Delete Information
                                </h6>
                                <div>
                                    <p class="mb-1"><strong>Entity ID:</strong> <span>${entityId}</span></p>
                                    <p class="mb-1"><strong>Action:</strong> <span class="text-danger">Permanent Deletion</span></p>
                                    <p class="mb-0"><strong>Controller:</strong> <span>${controller}</span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>

            <div class="row mt-4">
                <div class="col-12">
                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" onclick="closeDeleteModal()">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                        <button type="submit" class="btn btn-danger" form="deleteForm">
                            <i class="bi bi-trash"></i>
                            <span class="submit-text">Delete Permanently</span>
                            <div class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></div>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
    
    function closeDeleteModal() {
        var modal = document.getElementById('deleteModal');
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
    
    // Initialize room form with AJAX submission
    function initializeRoomForm() {
        console.log('🎉 initializeRoomForm called!');
        
        var form = document.getElementById('roomForm');
        if (form) {
            // Check if already initialized to prevent duplicate handlers
            if (form.dataset.initialized === 'true') {
                console.log('⚠️ Form already initialized, skipping');
                return;
            }
            
            console.log('🔗 Binding submit event to room form');
            form.addEventListener('submit', function(event) {
                console.log('📝 Room form submit event triggered');
                event.preventDefault();
                submitRoomForm(event);
            });
            
            // Mark as initialized
            form.dataset.initialized = 'true';
        } else {
            console.error('❌ Could not find room form to bind submit event');
        }
    }
    
    // Submit room form via AJAX
    function submitRoomForm(event) {
        console.log('🚀 submitRoomForm called!', event);
        event.preventDefault();
        
        var form = document.getElementById('roomForm');
        var submitBtn = document.querySelector('button[form="roomForm"]') || (form ? form.querySelector('button[type="submit"]') : null);
        var spinner = submitBtn ? submitBtn.querySelector('.spinner-border') : null;
        var formErrors = document.getElementById('formErrors');
        var formSuccess = document.getElementById('formSuccess');
        
        console.log('🔍 Form elements found:', {
            form: !!form,
            submitBtn: !!submitBtn,
            spinner: !!spinner,
            formErrors: !!formErrors,
            formSuccess: !!formSuccess
        });
        
        if (!form) {
            console.error('❌ Form not found!');
            return false;
        }
        
        if (!submitBtn) {
            console.error('❌ Submit button not found!');
            return false;
        }
        
        // Validate form
        console.log('🔎 Checking form validity...');
        if (!form.checkValidity()) {
            console.log('⚠️ Form is invalid, showing validation errors');
            form.classList.add('was-validated');
            return false;
        }
        
        console.log('✅ Form is valid, proceeding with submission');
        
        // Show loading state
        console.log('⏳ Showing loading state');
        submitBtn.disabled = true;
        if (spinner) {
            spinner.style.display = 'inline-block';
        }
        
        // Hide previous messages
        if (formErrors) formErrors.style.display = 'none';
        if (formSuccess) formSuccess.style.display = 'none';
        
        // Submit form via AJAX
        var formData = new FormData(form);
        console.log('📤 Submitting form to:', form.action);
        console.log('📦 Form data entries:');
        for (let [key, value] of formData.entries()) {
            console.log(`  ${key}:`, value);
        }
        
        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            console.log('📥 Response received:', response.status, response.statusText);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(result => {
            console.log('🎯 Response data:', result);
            if (result.success) {
                console.log('✅ Success! Showing success message');
                if (formSuccess) {
                    formSuccess.innerHTML = '<i class="bi bi-check-circle"></i> ' + result.message;
                    formSuccess.style.display = 'block';
                }
                
                // Close modal and reload page after short delay
                setTimeout(() => {
                    console.log('🔄 Closing modal and reloading page');
                    closeRoomModal();
                    window.location.reload();
                }, 1500);
            } else {
                console.log('❌ Server returned error:', result);
                if (formErrors) {
                    var errors = Array.isArray(result.errors) ? result.errors : [result.message || 'An error occurred'];
                    formErrors.innerHTML = '<i class="bi bi-exclamation-triangle"></i> ' + errors.join('<br>');
                    formErrors.style.display = 'block';
                }
            }
        })
        .catch(error => {
            console.error('💥 Form submission error:', error);
            if (formErrors) {
                formErrors.innerHTML = '<i class="bi bi-exclamation-triangle"></i> An error occurred while saving. Please try again.';
                formErrors.style.display = 'block';
            }
        })
        .finally(() => {
            console.log('🔄 Resetting form state');
            submitBtn.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
        });
        
        return false;
    }
    function BookRoom(roomId) {
        fetch('/Rooms/BookRoom?roomId=' + roomId, {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken()
            }
        })
            .then(response => response.text())
            .then(html => {
                document.getElementById('bookingModalContainer').innerHTML = html;
                var modal = new bootstrap.Modal(document.getElementById('bookingModal'));
                modal.show();
            });
    }

    function editBookingRequest(bookingRequestId) {
        fetch('/Rooms/EditBookingRequest?bookingRequestId=' + bookingRequestId, {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken()
            }
        })
            .then(response => response.text())
            .then(html => {
                document.getElementById('bookingModalContainer').innerHTML = html;
                var modal = new bootstrap.Modal(document.getElementById('bookingModal'));
                modal.show();
            });
    }
    // Save the active tab to localStorage when changed
    document.addEventListener('DOMContentLoaded', function () {
        var tabEls = document.querySelectorAll('button[data-bs-toggle="tab"]');
        tabEls.forEach(function (tabEl) {
            tabEl.addEventListener('shown.bs.tab', function (event) {
                localStorage.setItem('activeRoomTab', event.target.id);
                
                // After tab is shown, recalculate DataTable columns
                setTimeout(function() {
                    var targetTab = document.querySelector(event.target.getAttribute('data-bs-target'));
                    if (targetTab) {
                        var tables = targetTab.querySelectorAll('table[data-datatable]');
                        tables.forEach(function(table) {
                            if ($.fn.DataTable.isDataTable('#' + table.id)) {
                                $('#' + table.id).DataTable().columns.adjust().responsive.recalc();
                            }
                        });
                    }
                }, 10);
            });
        });

        // On page load, restore the active tab
        var activeTab = localStorage.getItem('activeRoomTab');
        if (activeTab) {
            var triggerEl = document.getElementById(activeTab);
            if (triggerEl) {
                var tab = new bootstrap.Tab(triggerEl);
                tab.show();
            }
        }
        
    });
    
    // Close modals when clicking outside or pressing Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeRoomModal();
            closeDeleteModal();
        }
    });

  </script>
}