@model IEnumerable<PropertyManagement.Web.ViewModels.RoomViewModel>
@{
    // Generate unique IDs based on ViewContext or provide default
    var tabId = ViewData["TabId"]?.ToString() ?? "default";
    var tableId = $"roomsTable-{tabId}";
    var searchId = $"rooms-search-{tabId}";
}

<!-- Search Component for Rooms -->
@{
  ViewData["SearchId"] = searchId;
  ViewData["SearchPlaceholder"] = "Search by room number, type, or status...";
  ViewData["SearchLabel"] = "Search Rooms";
  ViewData["ShowExtraActions"] = true;
  ViewData["ExtraActionsContent"] = $"<button class='btn btn-outline-secondary btn-sm' onclick='exportRooms(\"{tableId}\")'><i class='bi bi-download'></i> Export</button><button class='btn btn-outline-success btn-sm' onclick='filterAvailable(\"{searchId}\")'><i class='bi bi-check-circle'></i> Available Only</button>";
}
@await Html.PartialAsync("_TableSearch")

<table class="table table-striped table-bordered align-middle mb-0"
       id="@tableId"
       data-datatable
       data-page-length="8"
       data-search-label="Search rooms:"
       data-empty-message="No rooms found">
  <thead class="table-light">
    <tr>
      <th>Number</th>
      <th>Type</th>
      <th>Status</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var room in Model)
    {
      <tr class="@(room.Status == "Available" ? "table-success" : room.Status == "Occupied" ? "table-info" : "table-warning")">
        <td>
          <span class="fw-semibold">@room.Number</span>
        </td>
        <td>@room.Type</td>
        <td>
          <span class="badge bg-@(room.Status == "Available" ? "success" : room.Status == "Occupied" ? "primary" : "warning")">
            @room.Status
          </span>
        </td>
        <td class="text-center">
          <div class="btn-group" role="group" aria-label="Room actions">
            <button type="button" 
                    class="btn btn-sm btn-outline-primary" 
                    onclick="openEditModal(@room.RoomId)" 
                    title="Edit Room">
              <i class="bi bi-pencil-square"></i>
            </button>
            <a class="btn btn-sm btn-outline-info" 
               asp-action="GetRoom" 
               asp-route-id="@room.RoomId" 
               title="View Details">
              <i class="bi bi-info-circle-fill"></i>
            </a>
            @if (room.Status == "Available")
            {
              <button type="button" 
                      class="btn btn-sm btn-outline-success" 
                      onclick="BookRoom(@room.RoomId)" 
                      title="Book Room">
                <i class="bi bi-calendar-check-fill"></i>
              </button>
            }
            <button type="button" 
                    class="btn btn-sm btn-outline-danger" 
                    onclick="deleteRoom(@room.RoomId)" 
                    title="Delete Room">
              <i class="bi bi-trash-fill"></i>
            </button>
          </div>
          
          <!-- Hidden Delete Form -->
          <form id="deleteForm-@room.RoomId" asp-action="Delete" asp-route-id="@room.RoomId" method="post" style="display:none;">
            @Html.AntiForgeryToken()
          </form>
        </td>
      </tr>
    }
  </tbody>
</table>

<script>
  // Pagination helper functions for rooms
  function exportRooms(tableId) {
      if (typeof PaginationHelpers !== 'undefined') {
          PaginationHelpers.exportVisibleToCSV(tableId, 'rooms-export.csv');
      }
  }

  function filterAvailable(searchId) {
      const searchInput = document.getElementById(searchId);
      if (searchInput) {
          searchInput.value = 'Available';
          searchInput.dispatchEvent(new Event('input'));
          if (typeof toastr !== 'undefined') {
              toastr.info('Filtered to show available rooms only');
          }
      }
  }
</script>