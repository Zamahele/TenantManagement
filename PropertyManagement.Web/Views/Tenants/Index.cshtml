@model IEnumerable<PropertyManagement.Web.ViewModels.TenantViewModel>
@{
  ViewData["Title"] = "Tenants";
  var rooms = ViewBag.Rooms as List<PropertyManagement.Web.ViewModels.RoomViewModel>;
}

<!-- Page Header -->
<div class="page-header mb-4">
  <div class="d-flex justify-content-between align-items-center">
    <div class="page-title">
      <h1 class="page-title-main">
        <div class="page-icon">
          <i class="bi bi-people"></i>
        </div>
        Tenants
      </h1>
      <p class="page-title-sub text-secondary mb-0">Manage tenant information, contacts, and room assignments</p>
    </div>
    <div class="page-actions">
      <div class="page-info text-end me-3">
        <div class="text-secondary small">Total Tenants</div>
        <div class="fw-semibold">@Model.Count()</div>
      </div>
      <button class="btn btn-primary page-action-btn primary" onclick="openAddModal()">
        <i class="bi bi-plus-circle"></i>
        Add Tenant
      </button>
    </div>
  </div>
</div>

<!-- Tenants Table Container -->
<div class="table-container">
  <div class="table-header">
    <h5 class="table-title">Tenant Directory</h5>
    <p class="table-description">Complete list of all tenants with contact information and room assignments</p>
  </div>
  <div class="table-responsive">
    <table class="table align-middle mb-0" id="tenantsTable" 
           data-datatable
           data-page-length="15"
           data-search-label="Search tenants:"
           data-empty-message="No tenants found">
      <thead>
        <tr>
          <th>Tenant</th>
          <th>Contact Information</th>
          <th>Emergency Contact</th>
          <th>Room Assignment</th>
          <th class="text-center">Actions</th>
        </tr>
      </thead>
      <tbody>
        @if (Model.Any())
        {
          @foreach (var tenant in Model)
          {
            <tr>
              <td>
                <div class="d-flex align-items-center">
                  <div class="tenant-avatar me-3">
                    <i class="bi bi-person-circle text-primary"></i>
                  </div>
                  <div>
                    <div class="fw-semibold text-primary">@tenant.FullName</div>
                    <div class="text-muted small">Tenant ID: @tenant.TenantId</div>
                  </div>
                </div>
              </td>
              <td>
                <div class="contact-info">
                  <div class="mb-1">
                    <i class="bi bi-telephone text-success me-2"></i>
                    <span>@tenant.Contact</span>
                  </div>
                  @if (!string.IsNullOrEmpty(tenant.User?.Username))
                  {
                    <div class="text-muted small">
                      <i class="bi bi-person-badge me-2"></i>
                      <span>@tenant.User.Username</span>
                    </div>
                  }
                </div>
              </td>
              <td>
                <div class="emergency-contact">
                  @if (!string.IsNullOrEmpty(tenant.EmergencyContactName))
                  {
                    <div class="fw-medium">@tenant.EmergencyContactName</div>
                    <div class="text-muted small">
                      <i class="bi bi-telephone me-1"></i>
                      @tenant.EmergencyContactNumber
                    </div>
                  }
                  else
                  {
                    <span class="text-muted">Not provided</span>
                  }
                </div>
              </td>
              <td>
                @if (tenant.Room != null)
                {
                  <span class="badge bg-primary-subtle text-primary-emphasis px-3 py-2">
                    <i class="bi bi-door-closed me-1"></i>
                    Room @tenant.Room.Number
                  </span>
                }
                else
                {
                  <span class="badge bg-warning-subtle text-warning-emphasis px-3 py-2">
                    <i class="bi bi-exclamation-circle me-1"></i>
                    No Room
                  </span>
                }
              </td>
              <td class="text-center">
                <div class="btn-group" role="group" aria-label="Tenant actions">
                  <button type="button" 
                          class="btn btn-sm btn-outline-primary" 
                          onclick="openEditModal(@tenant.TenantId)" 
                          title="Edit Tenant">
                    <i class="bi bi-pencil-square"></i>
                  </button>
                  <button type="button" 
                          class="btn btn-sm btn-outline-warning" 
                          onclick="openChangePasswordModal(@tenant.TenantId)" 
                          title="Change Password">
                    <i class="bi bi-key-fill"></i>
                  </button>
                  @await Html.PartialAsync(
                      "_DeleteModal",
                      new PropertyManagement.Web.ViewModels.DeleteModalViewModel {
                          ModalId = $"deleteModal-{tenant.TenantId}",
                          ModalLabelId = $"deleteModalLabel-{tenant.TenantId}",
                          Title = "Delete Tenant",
                          Body = $"Are you sure you want to delete <strong>{tenant.FullName}</strong>?",
                          Action = "Delete",
                          Controller = "Tenants",
                          EntityId = tenant.TenantId
                      }
                  )
                </div>
              </td>
            </tr>
          }
        }
        else
        {
          <tr>
            <td colspan="5">
              <div class="empty-state">
                <i class="bi bi-people empty-state-icon"></i>
                <h3 class="empty-state-title">No Tenants Found</h3>
                <p class="empty-state-description">
                  Start building your tenant directory by adding your first tenant. 
                  You can add tenant information, contact details, and room assignments.
                </p>
                <button class="empty-state-action" onclick="openAddModal()">
                  <i class="bi bi-plus-circle"></i>
                  Add First Tenant
                </button>
              </div>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>

<!-- Custom Tenant Modal -->
<div id="tenantModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeTenantModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h4 class="custom-modal-title">
        <i class="bi bi-person-plus me-2"></i>
        <span id="tenantModalTitle">Add Tenant</span>
      </h4>
      <button type="button" class="custom-modal-close" onclick="closeTenantModal()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    <div class="custom-modal-body" id="tenantModalBody">
      <div class="loading-state">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading form...</p>
      </div>
    </div>
  </div>
</div>

<!-- Custom Change Password Modal -->
<div id="changePasswordModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeChangePasswordModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h4 class="custom-modal-title">
        <i class="bi bi-key me-2"></i>
        <span id="changePasswordModalLabel">Change Password</span>
      </h4>
      <button type="button" class="custom-modal-close" onclick="closeChangePasswordModal()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    <div class="custom-modal-body" id="changePasswordModalBody">
      <div class="loading-state">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading form...</p>
      </div>
    </div>
  </div>
</div>

<!-- Custom Delete Modal -->
<div id="deleteModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeDeleteModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h4 class="custom-modal-title">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        <span id="deleteModalTitle">Confirm Delete</span>
      </h4>
      <button type="button" class="custom-modal-close" onclick="closeDeleteModal()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    <div class="custom-modal-body" id="deleteModalBody">
      <!-- Delete form content will be loaded here -->
    </div>
  </div>
</div>

@section Styles {
  <style>
    /* Custom Modal Styles */
    .custom-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1050;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .custom-modal-backdrop {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.4);
    }
    
    .custom-modal-content {
      position: relative;
      background: white;
      border-radius: 8px;
      width: 90%;
      max-width: 900px;
      max-height: 90vh;
      overflow: hidden;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      border: 1px solid #dee2e6;
      z-index: 1051;
    }
    
    .custom-modal-header {
      background: #f8f9fa;
      color: #495057;
      padding: 1.25rem 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #dee2e6;
    }
    
    .custom-modal-title {
      margin: 0;
      font-size: 1.125rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      color: #212529;
    }
    
    .custom-modal-close {
      background: none;
      border: none;
      color: #6c757d;
      font-size: 1.25rem;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 4px;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.15s ease;
    }
    
    .custom-modal-close:hover {
      background-color: #e9ecef;
      color: #495057;
    }
    
    .custom-modal-body {
      padding: 1.5rem;
      max-height: calc(90vh - 100px);
      overflow-y: auto;
    }
    
    .loading-state {
      text-align: center;
      padding: 3rem 0;
    }
    
    /* Responsive Design */
    @@media (max-width: 768px) {
      .custom-modal-content {
        width: 95%;
        max-height: 95vh;
        margin: 1rem;
      }
      
      .custom-modal-header {
        padding: 1rem 1.5rem;
      }
      
      .custom-modal-body {
        padding: 1.5rem;
        max-height: calc(95vh - 100px);
      }
      
      .custom-modal-title {
        font-size: 1.1rem;
      }
    }
    
    /* Smooth scrollbar for modal body */
    .custom-modal-body::-webkit-scrollbar {
      width: 6px;
    }
    
    .custom-modal-body::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb:hover {
      background: #a1a1a1;
    }
  </style>
}

@section Scripts {
  <script>
    function getAntiForgeryToken() {
        return $('input[name="__RequestVerificationToken"]').val();
    }

    function openAddModal() {
        loadTenantForm('Add Tenant', '/Tenants/TenantForm');
    }
    
    function openEditModal(id) {
        loadTenantForm('Edit Tenant', '/Tenants/TenantForm?id=' + id);
    }

    function loadTenantForm(title, url) {
        // Show loading state
        document.getElementById('tenantModalTitle').innerText = title;
        document.getElementById('tenantModalBody').innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="mt-2">Loading form...</div>
            </div>`;
        
        // Show modal
        document.getElementById('tenantModal').style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Load form content
        fetch(url, {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken(),
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('tenantModalBody').innerHTML = html;
            initializeTenantForm();
        })
        .catch(error => {
            console.error('Error loading form:', error);
            document.getElementById('tenantModalBody').innerHTML = `
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> 
                    Error loading form. Please try again.
                </div>`;
        });
    }

    function initializeTenantForm() {
        // Initialize form after it's loaded into modal
        var contactField = document.getElementById('Contact');
        var usernameField = document.getElementById('username');
        var form = document.getElementById('tenantForm');
        
        // Sync username with contact number
        if (contactField && usernameField) {
            // Set initial value
            if (contactField.value && !usernameField.value) {
                usernameField.value = contactField.value;
            }
            
            // Update on input
            contactField.addEventListener('input', function() {
                usernameField.value = this.value;
            });
        }
        
        // Handle form submission via AJAX
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                submitTenantForm(form);
            });
        }
        
        // Enable Bootstrap validation
        form.classList.add('needs-validation');
    }

    function submitTenantForm(form) {
        var submitButton = document.querySelector('button[form="tenantForm"]') || (form ? form.querySelector('button[type="submit"]') : null);
        var spinner = submitButton ? submitButton.querySelector('.spinner-border') : null;
        var submitText = submitButton ? submitButton.querySelector('.submit-text') : null;
        var errorDiv = document.getElementById('formErrors');
        var successDiv = document.getElementById('formSuccess');
        
        if (!form) {
            console.error('❌ Form not found!');
            return;
        }
        
        if (!submitButton) {
            console.error('❌ Submit button not found!');
            return;
        }
        
        // Show loading state
        submitButton.disabled = true;
        if (spinner) {
            spinner.style.display = 'inline-block';
        }
        if (errorDiv) errorDiv.style.display = 'none';
        if (successDiv) successDiv.style.display = 'none';
        
        // Validate form
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            submitButton.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
            return;
        }
        
        // Submit form
        var formData = new FormData(form);
        
        fetch('/Tenants/CreateOrEdit', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || 'Server error');
                });
            }
            return response.json();
        })
        .then(result => {
            if (result.success) {
                // Show success message
                successDiv.innerHTML = '<i class="bi bi-check-circle"></i> ' + result.message;
                successDiv.style.display = 'block';
                
                // Close modal after short delay
                setTimeout(() => {
                    closeTenantModal();
                    
                    // Refresh the page to show updated data
                    window.location.reload();
                }, 1500);
            } else {
                // Show error messages
                var errors = Array.isArray(result.errors) ? result.errors : [result.message || 'An error occurred'];
                errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> ' + errors.join('<br>');
                errorDiv.style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Form submission error:', error);
            errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> An error occurred while saving. Please try again.';
            errorDiv.style.display = 'block';
        })
        .finally(() => {
            submitButton.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
        });
    }

    function openChangePasswordModal(id) {
        var modal = document.getElementById('changePasswordModal');
        var modalBody = document.getElementById('changePasswordModalBody');
        
        // Show loading state
        modalBody.innerHTML = `
            <div class="loading-state">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading form...</p>
            </div>
        `;
        
        // Show modal
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Load form content
        fetch('/Tenants/ChangePassword/' + id, {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken(),
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('changePasswordModalLabel').innerText = 'Change Password';
            modalBody.innerHTML = html;
        })
        .catch(error => {
            console.error('Error loading password change form:', error);
            modalBody.innerHTML = `
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> 
                    Error loading form. Please try again.
                </div>`;
        });
    }

    function closeTenantModal() {
        document.getElementById('tenantModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    function closeChangePasswordModal() {
        document.getElementById('changePasswordModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }
    
    // Delete Modal Functions (consistent with lease agreements pattern)
    function openDeleteModal(entityId, action, controller, body, title) {
        var modal = document.getElementById('deleteModal');
        var modalTitle = document.getElementById('deleteModalTitle');
        var modalBody = document.getElementById('deleteModalBody');
        
        modalTitle.textContent = title || 'Confirm Delete';
        
        // Create delete form content with professional styling
        modalBody.innerHTML = `
            <!-- Form Error Display -->
            <div id="formErrors" class="alert alert-danger" style="display: none;"></div>
            <div id="formSuccess" class="alert alert-success" style="display: none;"></div>

            <form id="deleteForm" action="/${controller}/${action}" method="post" class="needs-validation" novalidate>
                <input name="__RequestVerificationToken" type="hidden" value="${document.querySelector('input[name="__RequestVerificationToken"]').value}" />
                <input type="hidden" name="id" value="${entityId}" />
                
                <div class="row g-4">
                    <div class="col-12">
                        <div class="alert alert-danger border-danger">
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-exclamation-triangle-fill text-danger fs-2 me-3"></i>
                                <div>
                                    <h5 class="alert-heading mb-1 text-danger">${title}</h5>
                                    <p class="mb-0">This action cannot be undone.</p>
                                </div>
                            </div>
                            
                            <div class="mb-0">${body}</div>
                        </div>
                        
                        <div class="card border-info bg-light">
                            <div class="card-body p-3">
                                <h6 class="card-title text-info mb-2">
                                    <i class="bi bi-info-circle"></i> Delete Information
                                </h6>
                                <div>
                                    <p class="mb-1"><strong>Entity ID:</strong> <span>${entityId}</span></p>
                                    <p class="mb-1"><strong>Action:</strong> <span class="text-danger">Permanent Deletion</span></p>
                                    <p class="mb-0"><strong>Controller:</strong> <span>${controller}</span></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>

            <div class="row mt-4">
                <div class="col-12">
                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" onclick="closeDeleteModal()">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                        <button type="submit" class="btn btn-danger" form="deleteForm">
                            <i class="bi bi-trash"></i>
                            <span class="submit-text">Delete Permanently</span>
                            <div class="spinner-border spinner-border-sm ms-2" style="display: none;" role="status" aria-hidden="true"></div>
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }
    
    function closeDeleteModal() {
        var modal = document.getElementById('deleteModal');
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
    }
    
    // Close modals when clicking outside or pressing Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeTenantModal();
            closeChangePasswordModal();
            closeDeleteModal();
        }
    });

  </script>
}