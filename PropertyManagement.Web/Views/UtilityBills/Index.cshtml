@using System.Globalization
@model IEnumerable<PropertyManagement.Web.ViewModels.UtilityBillViewModel>
@{
    ViewData["Title"] = "Utility Bills";
}

<!-- Page Header -->
<div class="page-header mb-4">
  <div class="d-flex justify-content-between align-items-center">
    <div class="page-title">
      <h1 class="page-title-main">
        <div class="page-icon">
          <i class="bi bi-droplet-half"></i>
        </div>
        Utility Bills
      </h1>
      <p class="page-title-sub text-secondary mb-0">Track water and electricity usage for all rooms</p>
    </div>
    <div class="page-actions">
      <div class="page-info text-end me-3">
        <div class="text-secondary small">Total Bills</div>
        <div class="fw-semibold">@Model.Count()</div>
      </div>
      <button class="btn btn-primary page-action-btn primary" onclick="openAddModal()">
        <i class="bi bi-plus-circle"></i>
        Add Utility Bill
      </button>
    </div>
  </div>
</div>

<!-- Utility Bills Table Container -->
<div class="table-container">
  <div class="table-header">
    <h5 class="table-title">Utility Bills Management</h5>
    <p class="table-description">Monitor water and electricity usage across all rooms with automatic cost calculations</p>
  </div>
  <div class="table-responsive">
    <table class="table align-middle mb-0" id="utilityBillsTable" 
           data-datatable
           data-page-length="15"
           data-search-label="Search utility bills:"
           data-empty-message="No utility bills found. Click 'Add Utility Bill' to get started.">
      <thead>
        <tr>
          <th>Room</th>
          <th>Billing Date</th>
          <th>Water Usage</th>
          <th>Electricity Usage</th>
          <th>Total Amount</th>
          <th>Notes</th>
          <th class="text-center">Actions</th>
        </tr>
      </thead>
      <tbody>
        @if (Model.Any())
        {
          @foreach (var bill in Model)
          {
            <tr>
              <td>
                <div class="d-flex align-items-center">
                  <div class="room-icon me-3">
                    <i class="bi bi-door-closed text-primary"></i>
                  </div>
                  <div>
                    <div class="fw-semibold text-primary">Room @(bill.Room?.Number ?? "N/A")</div>
                    <div class="text-muted small">@(bill.Room?.Type ?? "Unknown")</div>
                  </div>
                </div>
              </td>
              <td>
                <div class="fw-medium">@bill.BillingDate.ToString("MMM dd, yyyy")</div>
                <div class="text-muted small">@bill.BillingDate.ToString("dddd")</div>
              </td>
              <td>
                <div class="usage-info">
                  <div class="fw-medium text-info">@bill.WaterUsage L</div>
                  <div class="text-muted small">@@ @(ViewBag.WaterRate?.ToString("C") ?? "R0.02")/L</div>
                </div>
              </td>
              <td>
                <div class="usage-info">
                  <div class="fw-medium text-warning">@bill.ElectricityUsage kWh</div>
                  <div class="text-muted small">@@ @(ViewBag.ElectricityRate?.ToString("C") ?? "R1.50")/kWh</div>
                </div>
              </td>
              <td>
                <span class="badge bg-success-subtle text-success-emphasis px-3 py-2 fw-semibold">
                  @bill.TotalAmount.ToString("C")
                </span>
              </td>
              <td>
                @if (!string.IsNullOrEmpty(bill.Notes))
                {
                  <div class="notes-preview" title="@bill.Notes">
                    @(bill.Notes.Length > 30 ? bill.Notes.Substring(0, 30) + "..." : bill.Notes)
                  </div>
                }
                else
                {
                  <span class="text-muted">-</span>
                }
              </td>
              <td class="text-center">
                <div class="btn-group" role="group" aria-label="Utility bill actions">
                  <button type="button" 
                          class="btn btn-sm btn-outline-primary" 
                          onclick="openEditModal(@bill.UtilityBillId)" 
                          title="Edit Utility Bill">
                    <i class="bi bi-pencil-square"></i>
                  </button>
                  @await Html.PartialAsync(
                      "_DeleteModal",
                      new PropertyManagement.Web.ViewModels.DeleteModalViewModel {
                          ModalId = $"deleteModal-{bill.UtilityBillId}",
                          ModalLabelId = $"deleteModalLabel-{bill.UtilityBillId}",
                          Title = "Delete Utility Bill",
                          Body = $"Are you sure you want to delete the utility bill for <strong>Room {bill.Room?.Number ?? "N/A"}</strong> on <strong>{bill.BillingDate.ToString("MMM dd, yyyy")}</strong>?",
                          Action = "Delete",
                          Controller = "UtilityBills",
                          EntityId = bill.UtilityBillId
                      }
                  )
                </div>
              </td>
            </tr>
          }
        }
        @* Empty state handled by DataTables language.emptyTable *@
      </tbody>
    </table>
  </div>
</div>

<!-- Custom Utility Bill Modal -->
<div id="utilityBillModal" class="custom-modal" style="display: none;">
  <div class="custom-modal-backdrop" onclick="closeUtilityBillModal()"></div>
  <div class="custom-modal-content">
    <div class="custom-modal-header">
      <h4 class="custom-modal-title">
        <i class="bi bi-droplet-half me-2"></i>
        <span id="utilityBillModalTitle">Add Utility Bill</span>
      </h4>
      <button type="button" class="custom-modal-close" onclick="closeUtilityBillModal()">
        <i class="bi bi-x-lg"></i>
      </button>
    </div>
    <div class="custom-modal-body" id="utilityBillModalBody">
      <div class="loading-state">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading form...</p>
      </div>
    </div>
  </div>
</div>

@section Styles {
  <style>
    /* Custom Modal Styles */
    .custom-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1050;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .custom-modal-backdrop {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.4);
    }
    
    .custom-modal-content {
      position: relative;
      background: white;
      border-radius: 8px;
      width: 90%;
      max-width: 600px;
      max-height: 90vh;
      overflow: hidden;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      border: 1px solid #dee2e6;
      z-index: 1051;
    }
    
    .custom-modal-header {
      background: #f8f9fa;
      color: #495057;
      padding: 1.25rem 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #dee2e6;
    }
    
    .custom-modal-title {
      margin: 0;
      font-size: 1.125rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      color: #212529;
    }
    
    .custom-modal-close {
      background: none;
      border: none;
      color: #6c757d;
      font-size: 1.25rem;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 4px;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.15s ease;
    }
    
    .custom-modal-close:hover {
      background-color: #e9ecef;
      color: #495057;
    }
    
    .custom-modal-body {
      padding: 1.5rem;
      max-height: calc(90vh - 100px);
      overflow-y: auto;
    }
    
    .loading-state {
      text-align: center;
      padding: 3rem 0;
    }
    
    .usage-info {
      text-align: left;
    }
    
    .notes-preview {
      max-width: 150px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    /* Responsive Design */
    @@media (max-width: 768px) {
      .custom-modal-content {
        width: 95%;
        max-height: 95vh;
        margin: 1rem;
      }
      
      .custom-modal-header {
        padding: 1rem 1.5rem;
      }
      
      .custom-modal-body {
        padding: 1.5rem;
        max-height: calc(95vh - 100px);
      }
      
      .custom-modal-title {
        font-size: 1.1rem;
      }
    }
    
    /* Smooth scrollbar for modal body */
    .custom-modal-body::-webkit-scrollbar {
      width: 6px;
    }
    
    .custom-modal-body::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb:hover {
      background: #a1a1a1;
    }
  </style>
}

@section Scripts {
  <script>
    // Utility rates for calculations
    const waterRate = @((ViewBag.WaterRate ?? 0.02m).ToString(CultureInfo.InvariantCulture));
    const electricityRate = @((ViewBag.ElectricityRate ?? 1.50m).ToString(CultureInfo.InvariantCulture));

    function getAntiForgeryToken() {
        return $('input[name="__RequestVerificationToken"]').val();
    }

    function openAddModal() {
        loadUtilityBillForm('Add Utility Bill', '/UtilityBills/UtilityBillForm');
    }
    
    function openEditModal(id) {
        loadUtilityBillForm('Edit Utility Bill', '/UtilityBills/UtilityBillForm?id=' + id);
    }

    function loadUtilityBillForm(title, url) {
        // Show loading state
        document.getElementById('utilityBillModalTitle').innerText = title;
        document.getElementById('utilityBillModalBody').innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="mt-2">Loading form...</div>
            </div>`;
        
        // Show modal
        document.getElementById('utilityBillModal').style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Load form content
        fetch(url, {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken(),
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('utilityBillModalBody').innerHTML = html;
            initializeUtilityBillForm();
        })
        .catch(error => {
            console.error('Error loading form:', error);
            document.getElementById('utilityBillModalBody').innerHTML = `
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> 
                    Error loading form. Please try again.
                </div>`;
        });
    }

    function initializeUtilityBillForm() {
        // Initialize form after it's loaded into modal
        var waterField = document.getElementById('WaterUsage');
        var electricityField = document.getElementById('ElectricityUsage');
        var form = document.getElementById('utilityBillForm');
        
        // Update total calculation when usage changes
        function updateTotal() {
            var water = parseFloat(waterField?.value || 0);
            var electricity = parseFloat(electricityField?.value || 0);
            var total = (water * waterRate) + (electricity * electricityRate);
            
            var totalDisplay = document.getElementById('TotalAmountDisplay');
            var totalHidden = document.getElementById('TotalAmount');
            
            if (totalDisplay) totalDisplay.value = total.toFixed(2);
            if (totalHidden) totalHidden.value = total.toFixed(2);
        }
        
        // Attach calculation events
        if (waterField) {
            waterField.addEventListener('input', updateTotal);
        }
        if (electricityField) {
            electricityField.addEventListener('input', updateTotal);
        }
        
        // Initial calculation
        updateTotal();
        
        // Handle form submission via AJAX
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                submitUtilityBillForm(form);
            });
        }
        
        // Enable Bootstrap validation
        if (form) {
            form.classList.add('needs-validation');
        }
    }

    function submitUtilityBillForm(form) {
        var submitButton = document.querySelector('button[form="utilityBillForm"]') || (form ? form.querySelector('button[type="submit"]') : null);
        var spinner = submitButton ? submitButton.querySelector('.spinner-border') : null;
        var errorDiv = document.getElementById('formErrors');
        var successDiv = document.getElementById('formSuccess');
        
        if (!form) {
            console.error('❌ Form not found!');
            return;
        }
        
        if (!submitButton) {
            console.error('❌ Submit button not found!');
            return;
        }
        
        // Show loading state
        submitButton.disabled = true;
        if (spinner) {
            spinner.style.display = 'inline-block';
        }
        if (errorDiv) errorDiv.style.display = 'none';
        if (successDiv) successDiv.style.display = 'none';
        
        // Validate form
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            submitButton.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
            return;
        }
        
        // Submit form
        var formData = new FormData(form);
        
        fetch('/UtilityBills/CreateOrEdit', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || 'Server error');
                });
            }
            return response.json();
        })
        .then(result => {
            if (result.success) {
                // Show success message
                if (successDiv) {
                    successDiv.innerHTML = '<i class="bi bi-check-circle"></i> ' + result.message;
                    successDiv.style.display = 'block';
                }
                
                // Close modal after short delay
                setTimeout(() => {
                    closeUtilityBillModal();
                    
                    // Refresh the page to show updated data
                    window.location.reload();
                }, 1500);
            } else {
                // Show error messages
                var errors = Array.isArray(result.errors) ? result.errors : [result.message || 'An error occurred'];
                if (errorDiv) {
                    errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> ' + errors.join('<br>');
                    errorDiv.style.display = 'block';
                }
            }
        })
        .catch(error => {
            console.error('Form submission error:', error);
            if (errorDiv) {
                errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> An error occurred while saving. Please try again.';
                errorDiv.style.display = 'block';
            }
        })
        .finally(() => {
            submitButton.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
        });
    }

    function closeUtilityBillModal() {
        document.getElementById('utilityBillModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }
  </script>
}