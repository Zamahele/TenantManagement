@model PropertyManagement.Web.ViewModels.WaitingListManagementViewModel
@{
    ViewData["Title"] = "Waiting List";
}

<!-- Page Header -->
<div class="page-header mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div class="page-title">
            <h1 class="page-title-main">
                <div class="page-icon">
                    <i class="bi bi-hourglass-split"></i>
                </div>
                Waiting List
            </h1>
            <p class="page-title-sub text-secondary mb-0">Manage prospective tenants and notifications for room availability</p>
        </div>
        <div class="page-actions">
            <div class="page-info text-end me-3">
                <div class="text-secondary small">Active Entries</div>
                <div class="fw-semibold">@Model.Summary.ActiveEntries</div>
            </div>
            <button class="btn btn-outline-primary page-action-btn me-2" onclick="openQuickAddModal()">
                <i class="bi bi-telephone"></i>
                Quick Add
            </button>
            <button class="btn btn-primary page-action-btn primary" onclick="openAddWaitingListModal()">
                <i class="bi bi-plus-circle"></i>
                Add Entry
            </button>
        </div>
    </div>
</div>

<!-- Summary Cards -->
<div class="row mb-4">
    <div class="col-md-3 mb-3">
        <div class="card summary-card">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="summary-icon bg-primary">
                        <i class="bi bi-people"></i>
                    </div>
                    <div class="ms-3">
                        <h6 class="summary-title">Total Entries</h6>
                        <h4 class="summary-value">@Model.Summary.TotalEntries</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card summary-card">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="summary-icon bg-success">
                        <i class="bi bi-check-circle"></i>
                    </div>
                    <div class="ms-3">
                        <h6 class="summary-title">Active Entries</h6>
                        <h4 class="summary-value">@Model.Summary.ActiveEntries</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card summary-card">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="summary-icon bg-info">
                        <i class="bi bi-bell"></i>
                    </div>
                    <div class="ms-3">
                        <h6 class="summary-title">Notified This Week</h6>
                        <h4 class="summary-value">@Model.Summary.NotifiedThisWeek</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3 mb-3">
        <div class="card summary-card">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="summary-icon bg-warning">
                        <i class="bi bi-arrow-up-right"></i>
                    </div>
                    <div class="ms-3">
                        <h6 class="summary-title">Conversion Rate</h6>
                        <h4 class="summary-value">@Model.Summary.ConversionRateFormatted</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Search and Filter Section -->
<div class="table-container mb-4">
    <div class="table-header">
        <h5 class="table-title">Search & Filter</h5>
        <p class="table-description">Find and filter waiting list entries by status, room type, and other criteria</p>
    </div>
    <div class="table-body">
        <div class="row align-items-end">
            <div class="col-md-3 mb-3">
                <label class="form-label fw-semibold">Status Filter</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-flag"></i>
                    </span>
                    <select class="form-select" id="statusFilter" onchange="applyFilters()">
                        @foreach (var status in Model.StatusOptions)
                        {
                            <option value="@status" selected="@(status == Model.StatusFilter)">@status</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <label class="form-label fw-semibold">Room Type Filter</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-door-closed"></i>
                    </span>
                    <select class="form-select" id="roomTypeFilter" onchange="applyFilters()">
                        @foreach (var roomType in Model.RoomTypeOptions)
                        {
                            <option value="@roomType" selected="@(roomType == Model.RoomTypeFilter)">@roomType</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <label class="form-label fw-semibold">Search</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" 
                           class="form-control" 
                           id="searchInput" 
                           placeholder="Search name, phone, email..." 
                           value="@Model.SearchTerm" 
                           onkeypress="handleSearchKeyPress(event)">
                    <button class="btn btn-outline-secondary" 
                            type="button" 
                            onclick="clearSearch()"
                            title="Clear search">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <label class="form-label fw-semibold">Actions</label>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary flex-fill" 
                            onclick="clearFilters()"
                            title="Clear all filters">
                        <i class="bi bi-arrow-counterclockwise"></i> Clear
                    </button>
                    <button class="btn btn-outline-primary flex-fill" 
                            onclick="exportWaitingList()"
                            title="Export filtered results">
                        <i class="bi bi-download"></i> Export
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Filter Summary -->
        <div class="filter-summary mt-3 pt-3 border-top" id="filterSummary" style="display: none;">
            <div class="d-flex align-items-center justify-content-between">
                <div class="filter-info">
                    <span class="text-muted small">Active filters:</span>
                    <span class="filter-tags" id="filterTags"></span>
                </div>
                <button class="btn btn-link btn-sm text-decoration-none" onclick="clearAllFiltersAndSearch()">
                    <i class="bi bi-x-circle me-1"></i> Clear all
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Waiting List Table -->
<div class="table-container">
    <div class="table-header">
        <h5 class="table-title">Waiting List Entries</h5>
        <p class="table-description">All prospective tenants waiting for room availability</p>
    </div>
    <div class="table-responsive">
        <table class="table align-middle mb-0" id="waitingListTable" 
               data-datatable
               data-page-length="15"
               data-search-label="Search waiting list:"
               data-empty-message="No waiting list entries found">
            <thead>
                <tr>
                    <th>
                        <input type="checkbox" class="form-check-input" id="selectAll" onchange="toggleSelectAll()">
                    </th>
                    <th>Contact</th>
                    <th>Preferences</th>
                    <th>Registration</th>
                    <th>Notifications</th>
                    <th>Status</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Entries.Any())
                {
                    @foreach (var entry in Model.Entries)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" class="form-check-input entry-checkbox" value="@entry.WaitingListId">
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="contact-icon me-3">
                                        <i class="bi bi-person-circle fs-4 text-primary"></i>
                                    </div>
                                    <div>
                                        <div class="fw-medium">@(entry.FullName ?? "Unknown")</div>
                                        <div class="text-muted small">
                                            <i class="bi bi-telephone me-1"></i>@entry.PhoneNumber
                                        </div>
                                        @if (!string.IsNullOrEmpty(entry.Email))
                                        {
                                            <div class="text-muted small">
                                                <i class="bi bi-envelope me-1"></i>@entry.Email
                                            </div>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="preferences-info">
                                    <div class="small">
                                        <strong>Room:</strong> @entry.RoomTypeDisplay
                                    </div>
                                    <div class="small">
                                        <strong>Budget:</strong> @entry.BudgetFormatted
                                    </div>
                                    @if (!string.IsNullOrEmpty(entry.Source))
                                    {
                                        <div class="small">
                                            <strong>Source:</strong> @entry.Source
                                        </div>
                                    }
                                </div>
                            </td>
                            <td>
                                <div class="registration-info">
                                    <div class="small">
                                        <strong>Registered:</strong><br>@entry.RegisteredDateFormatted
                                    </div>
                                    @if (entry.LastNotified.HasValue)
                                    {
                                        <div class="small text-muted">
                                            <strong>Last Notified:</strong><br>@entry.LastNotifiedFormatted
                                        </div>
                                    }
                                </div>
                            </td>
                            <td class="text-center">
                                <div class="notification-stats">
                                    <span class="badge bg-secondary">
                                        @entry.NotificationCount sent
                                    </span>
                                </div>
                            </td>
                            <td>
                                <span class="badge @entry.StatusBadgeClass">@entry.Status</span>
                            </td>
                            <td class="text-center">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-sm btn-outline-info" 
                                            onclick="viewDetails(@entry.WaitingListId)" 
                                            title="View Details">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-primary" 
                                            onclick="openEditWaitingListModal(@entry.WaitingListId)" 
                                            title="Edit Entry">
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-success" 
                                            onclick="openNotificationModal(@entry.WaitingListId)" 
                                            title="Send Notification">
                                        <i class="bi bi-bell"></i>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-outline-danger" 
                                            onclick="openWaitingListDeleteModal(@entry.WaitingListId, '@entry.ContactDisplay', 'Entry registered @entry.RegisteredDateFormatted')" 
                                            title="Delete Entry">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center text-muted py-4">
                            <i class="bi bi-hourglass-split fs-1 mb-3 d-block"></i>
                            <h5>No waiting list entries found</h5>
                            <p>Start by adding prospective tenants to the waiting list.</p>
                            <button class="btn btn-primary" onclick="openAddWaitingListModal()">
                                <i class="bi bi-plus-circle"></i> Add First Entry
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Bulk Actions Panel -->
@if (Model.Entries.Any())
{
    <div class="card mt-4" id="bulkActionsPanel" style="display: none;">
        <div class="card-body">
            <div class="row align-items-end">
                <div class="col-md-4">
                    <label class="form-label">Bulk Action</label>
                    <select class="form-select" id="bulkActionSelect">
                        <option value="">Select an action...</option>
                        <option value="notify">Send Notification</option>
                        <option value="status">Update Status</option>
                        <option value="export">Export Selected</option>
                        <option value="delete">Delete Selected</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Message (for notifications)</label>
                    <textarea class="form-control" id="bulkMessage" rows="2" placeholder="Enter notification message..."></textarea>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-primary w-100" onclick="executeBulkAction()">
                        <i class="bi bi-lightning"></i> Execute
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Custom Waiting List Modal -->
<div id="waitingListModal" class="custom-modal" style="display: none;">
    <div class="custom-modal-backdrop" onclick="closeWaitingListModal()"></div>
    <div class="custom-modal-content">
        <div class="custom-modal-header">
            <h4 class="custom-modal-title">
                <i class="bi bi-hourglass-split me-2"></i>
                <span id="waitingListModalTitle">Add Waiting List Entry</span>
            </h4>
            <button type="button" class="custom-modal-close" onclick="closeWaitingListModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <div class="custom-modal-body" id="waitingListModalBody">
            <div class="loading-state">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading form...</p>
            </div>
        </div>
    </div>
</div>

<!-- Custom Quick Add Modal -->
<div id="quickAddModal" class="custom-modal" style="display: none;">
    <div class="custom-modal-backdrop" onclick="closeQuickAddModal()"></div>
    <div class="custom-modal-content">
        <div class="custom-modal-header">
            <h4 class="custom-modal-title">
                <i class="bi bi-telephone me-2"></i>
                <span id="quickAddModalTitle">Quick Add to Waiting List</span>
            </h4>
            <button type="button" class="custom-modal-close" onclick="closeQuickAddModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <div class="custom-modal-body" id="quickAddModalBody">
            <div class="loading-state">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading form...</p>
            </div>
        </div>
    </div>
</div>

<!-- Custom Notification Modal -->
<div id="notificationModal" class="custom-modal" style="display: none;">
    <div class="custom-modal-backdrop" onclick="closeNotificationModal()"></div>
    <div class="custom-modal-content">
        <div class="custom-modal-header">
            <h4 class="custom-modal-title">
                <i class="bi bi-bell me-2"></i>
                <span id="notificationModalTitle">Send Notification</span>
            </h4>
            <button type="button" class="custom-modal-close" onclick="closeNotificationModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <div class="custom-modal-body" id="notificationModalBody">
            <div class="loading-state">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2 text-muted">Loading form...</p>
            </div>
        </div>
    </div>
</div>

<!-- Custom Delete Modal -->
<div id="deleteModal" class="custom-modal" style="display: none;">
    <div class="custom-modal-backdrop" onclick="closeDeleteModal()"></div>
    <div class="custom-modal-content">
        <div class="custom-modal-header">
            <h4 class="custom-modal-title">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <span id="deleteModalTitle">Confirm Delete</span>
            </h4>
            <button type="button" class="custom-modal-close" onclick="closeDeleteModal()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
        <div class="custom-modal-body" id="deleteModalBody">
            <!-- Delete form content will be loaded here -->
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Global variables
    let selectedEntries = [];

    // Initialize page
    $(document).ready(function() {
        initializeDataTable();
        setupEventHandlers();
        initializeFilters();
    });

    function initializeFilters() {
        // Initialize filter summary on page load
        const status = $('#statusFilter').val();
        const roomType = $('#roomTypeFilter').val();
        const search = $('#searchInput').val().trim();
        updateFilterSummary(status, roomType, search);
    }

    function initializeDataTable() {
        // Check if table has data rows before initializing DataTable
        var tableRows = $('#waitingListTable tbody tr').length;
        if (tableRows === 0 || $('#waitingListTable tbody tr td[colspan]').length > 0) {
            // Don't initialize DataTable if there are no data rows or only empty state
            return;
        }

        if ($.fn.DataTable.isDataTable('#waitingListTable')) {
            $('#waitingListTable').DataTable().destroy();
        }
        
        $('#waitingListTable').DataTable({
            pageLength: 15,
            responsive: true,
            columnDefs: [
                { orderable: false, targets: [0, 6] } // Disable sorting on checkbox and actions columns
            ],
            language: {
                search: "Search waiting list:",
                emptyTable: "No waiting list entries found"
            }
        });
    }

    function setupEventHandlers() {
        // Handle checkbox changes
        $(document).on('change', '.entry-checkbox', function() {
            updateSelectedEntries();
        });
    }

    function getAntiForgeryToken() {
        return $('input[name="__RequestVerificationToken"]').val();
    }

    // Modal functions - Following Tenants pattern
    function openAddWaitingListModal() {
        loadWaitingListForm('Add Waiting List Entry', '/WaitingList/WaitingListForm');
    }

    function openEditWaitingListModal(id) {
        loadWaitingListForm('Edit Waiting List Entry', `/WaitingList/WaitingListForm?id=${id}`);
    }

    function loadWaitingListForm(title, url) {
        // Show loading state
        document.getElementById('waitingListModalTitle').innerText = title;
        document.getElementById('waitingListModalBody').innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="mt-2">Loading form...</div>
            </div>`;
        
        // Show modal
        document.getElementById('waitingListModal').style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Load form content
        fetch(url, {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken(),
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('waitingListModalBody').innerHTML = html;
            initializeWaitingListForm();
        })
        .catch(error => {
            console.error('Error loading form:', error);
            document.getElementById('waitingListModalBody').innerHTML = `
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> 
                    Error loading form. Please try again.
                </div>`;
        });
    }

    function initializeWaitingListForm() {
        // Initialize form after it's loaded into modal
        var form = document.getElementById('waitingListForm');
        var phoneInput = document.getElementById('PhoneNumber');
        
        // Phone number formatting
        if (phoneInput) {
            phoneInput.addEventListener('input', function() {
                let value = this.value.replace(/\D/g, ''); // Remove non-digits
                if (value.length > 10) {
                    value = value.substring(0, 10);
                }
                this.value = value;
                
                // Auto-advance to next field when 10 digits entered
                if (value.length === 10) {
                    const fullNameInput = document.getElementById('FullName');
                    if (fullNameInput) fullNameInput.focus();
                }
            });
        }
        
        // Handle form submission via AJAX
        if (form) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                submitWaitingListForm(form);
            });
        }
        
        // Auto-format budget
        const budgetInput = document.getElementById('MaxBudget');
        if (budgetInput) {
            budgetInput.addEventListener('blur', function() {
                const value = parseFloat(this.value);
                if (!isNaN(value)) {
                    this.value = value.toFixed(2);
                }
            });
            
            // Add currency helper text
            budgetInput.addEventListener('focus', function() {
                this.setAttribute('placeholder', 'e.g., 5000.00');
            });
            
            budgetInput.addEventListener('blur', function() {
                this.setAttribute('placeholder', '0.00');
            });
        }

        // Character limit for notes
        const notesInput = document.getElementById('Notes');
        if (notesInput) {
            notesInput.addEventListener('input', function() {
                const maxLength = 500;
                const currentLength = this.value.length;
                if (currentLength > maxLength) {
                    this.value = this.value.substring(0, maxLength);
                }
            });
        }
        
        // Enable Bootstrap validation
        form.classList.add('needs-validation');
    }

    function submitWaitingListForm(form) {
        var submitButton = document.querySelector('button[form="waitingListForm"]') || (form ? form.querySelector('button[type="submit"]') : null);
        var spinner = submitButton ? submitButton.querySelector('.spinner-border') : null;
        var submitText = submitButton ? submitButton.querySelector('.submit-text') : null;
        var errorDiv = document.getElementById('formErrors');
        var successDiv = document.getElementById('formSuccess');
        
        if (!form) {
            console.error('❌ Form not found!');
            return;
        }
        
        if (!submitButton) {
            console.error('❌ Submit button not found!');
            return;
        }
        
        // Show loading state
        submitButton.disabled = true;
        if (spinner) {
            spinner.style.display = 'inline-block';
        }
        if (errorDiv) errorDiv.style.display = 'none';
        if (successDiv) successDiv.style.display = 'none';
        
        // Validate form
        if (!form.checkValidity()) {
            form.classList.add('was-validated');
            submitButton.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
            return;
        }
        
        // Submit form
        var formData = new FormData(form);
        
        fetch('/WaitingList/CreateOrEdit', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(text || 'Server error');
                });
            }
            return response.json();
        })
        .then(result => {
            if (result.success) {
                // Show prominent success message
                successDiv.innerHTML = `
                    <div class="d-flex align-items-center">
                        <i class="bi bi-check-circle-fill text-success fs-4 me-2"></i>
                        <div>
                            <strong>Success!</strong><br>
                            <span>${result.message}</span>
                        </div>
                    </div>
                `;
                successDiv.style.display = 'block';
                
                // Disable form to prevent double submission
                form.style.pointerEvents = 'none';
                form.style.opacity = '0.7';
                
                // Close modal and reload after longer delay to show success
                setTimeout(() => {
                    closeWaitingListModal();
                    
                    // Show a toast notification before reload
                    showSuccessToast(result.message);
                    
                    // Delay reload to show toast
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                }, 3000); // Increased to 3 seconds
            } else {
                // Show error messages
                var errors = Array.isArray(result.errors) ? result.errors : [result.message || 'An error occurred'];
                errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> ' + errors.join('<br>');
                errorDiv.style.display = 'block';
            }
        })
        .catch(error => {
            console.error('Form submission error:', error);
            errorDiv.innerHTML = '<i class="bi bi-exclamation-triangle"></i> An error occurred while saving. Please try again.';
            errorDiv.style.display = 'block';
        })
        .finally(() => {
            submitButton.disabled = false;
            if (spinner) {
                spinner.style.display = 'none';
            }
        });
    }

    function openQuickAddModal() {
        loadQuickAddForm('Quick Add to Waiting List', '/WaitingList/QuickAdd');
    }

    function loadQuickAddForm(title, url) {
        console.log('🚀 loadQuickAddForm called with:', { title, url });
        
        // Show loading state
        document.getElementById('quickAddModalTitle').innerText = title;
        document.getElementById('quickAddModalBody').innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="mt-2">Loading form...</div>
            </div>`;
        
        // Show modal
        document.getElementById('quickAddModal').style.display = 'flex';
        document.body.style.overflow = 'hidden';
        
        // Load form content
        fetch(url, {
            method: 'GET',
            headers: {
                'RequestVerificationToken': getAntiForgeryToken(),
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            console.log('📄 Form HTML loaded:', html.substring(0, 200) + '...');
            document.getElementById('quickAddModalBody').innerHTML = html;
            
            // Wait a moment for DOM to update, then initialize
            setTimeout(() => {
                console.log('⏰ Initializing form after DOM update');
                initializeQuickAddForm();
                
                // Double-check that our form is properly set up
                const form = document.getElementById('quickAddForm');
                if (form) {
                    console.log('✅ Form found after initialization');
                    console.log('📋 Form elements check:', {
                        errorDiv: !!document.getElementById('quickFormErrors'),
                        successDiv: !!document.getElementById('quickFormSuccess'),
                        submitButton: !!form.querySelector('button[type="submit"]'),
                        phoneInput: !!document.getElementById('PhoneNumber')
                    });
                } else {
                    console.error('❌ Form not found after initialization');
                }
            }, 100);
        })
        .catch(error => {
            console.error('Error loading form:', error);
            document.getElementById('quickAddModalBody').innerHTML = `
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> 
                    Error loading form. Please try again.
                </div>`;
        });
    }

    // Add toast notification function
    function showSuccessToast(message) {
        // Create toast container if it doesn't exist
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'position-fixed top-0 end-0 p-3';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }

        const toastId = 'toast-' + Date.now();
        const toastHtml = `
            <div id="${toastId}" class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-success text-white">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    <strong class="me-auto">Waiting List Entry Added Successfully</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            </div>
        `;
        
        toastContainer.innerHTML = toastHtml;
        
        // Auto-remove after 4 seconds
        setTimeout(() => {
            const toast = document.getElementById(toastId);
            if (toast) {
                toast.remove();
            }
        }, 4000);
    }

    // Close modal functions
    function closeWaitingListModal() {
        document.getElementById('waitingListModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    function closeQuickAddModal() {
        document.getElementById('quickAddModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    function closeNotificationModal() {
        document.getElementById('notificationModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    function closeDeleteModal() {
        document.getElementById('deleteModal').style.display = 'none';
        document.body.style.overflow = 'auto';
    }

    // View details
    function viewDetails(id) {
        window.location.href = `/WaitingList/Details/${id}`;
    }

    // Delete modal
    function openWaitingListDeleteModal(id, contactInfo, details) {
        openDeleteModal(id, contactInfo, details, '/WaitingList/Delete', 'Waiting List Entry');
    }
    
    function openDeleteModal(entityId, contactInfo, details, actionUrl, title) {
        var modal = document.getElementById('deleteModal');
        var modalTitle = document.getElementById('deleteModalTitle');
        var modalBody = document.getElementById('deleteModalBody');
        
        modalTitle.textContent = `Delete ${title}`;
        modalBody.innerHTML = `
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle me-2"></i>
                <strong>Warning:</strong> This action cannot be undone.
            </div>
            <p><strong>Contact:</strong> ${contactInfo}</p>
            <p><strong>Details:</strong> ${details}</p>
            <p>Are you sure you want to delete this waiting list entry?</p>
        `;
        
        // Show the modal
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    // Filtering and search functions - Enhanced version
    function applyFilters() {
        const status = $('#statusFilter').val();
        const roomType = $('#roomTypeFilter').val();
        const search = $('#searchInput').val().trim();
        
        updateFilterSummary(status, roomType, search);
        
        // Apply filters via server request with proper parameters
        const params = new URLSearchParams();
        if (status && status !== 'All') params.append('statusFilter', status);
        if (roomType && roomType !== 'All') params.append('roomTypeFilter', roomType);
        if (search) params.append('searchTerm', search);
        
        const url = params.toString() ? `${window.location.pathname}?${params.toString()}` : window.location.pathname;
        
        // Show loading indicator
        showLoadingIndicator();
        
        window.location.href = url;
    }

    function clearFilters() {
        $('#statusFilter').val('All');
        $('#roomTypeFilter').val('All');
        document.getElementById('statusFilter').dispatchEvent(new Event('change'));
        document.getElementById('roomTypeFilter').dispatchEvent(new Event('change'));
        updateFilterSummary('All', 'All', $('#searchInput').val().trim());
    }

    function clearSearch() {
        $('#searchInput').val('');
        applyFilters();
    }

    function clearAllFiltersAndSearch() {
        $('#statusFilter').val('All');
        $('#roomTypeFilter').val('All');
        $('#searchInput').val('');
        updateFilterSummary('All', 'All', '');
        
        // Navigate to clean URL
        window.location.href = window.location.pathname;
    }

    function handleSearchKeyPress(event) {
        if (event.key === 'Enter') {
            event.preventDefault();
            applyFilters();
        }
    }

    function updateFilterSummary(status, roomType, search) {
        const filterSummary = document.getElementById('filterSummary');
        const filterTags = document.getElementById('filterTags');
        
        const activeFilters = [];
        
        if (status && status !== 'All') {
            activeFilters.push(`<span class="badge bg-primary-subtle text-primary-emphasis me-1">Status: ${status}</span>`);
        }
        
        if (roomType && roomType !== 'All') {
            activeFilters.push(`<span class="badge bg-success-subtle text-success-emphasis me-1">Room Type: ${roomType}</span>`);
        }
        
        if (search) {
            activeFilters.push(`<span class="badge bg-info-subtle text-info-emphasis me-1">Search: "${search}"</span>`);
        }
        
        if (activeFilters.length > 0) {
            filterTags.innerHTML = activeFilters.join('');
            filterSummary.style.display = 'block';
        } else {
            filterSummary.style.display = 'none';
        }
    }

    function showLoadingIndicator() {
        // Create a simple loading overlay
        const loadingHtml = `
            <div id="loadingOverlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
                 background: rgba(255, 255, 255, 0.8); z-index: 9999; display: flex; 
                 align-items: center; justify-content: center;">
                <div class="text-center">
                    <div class="spinner-border text-primary mb-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="text-muted">Applying filters...</div>
                </div>
            </div>
        `;
        
        if (!document.getElementById('loadingOverlay')) {
            document.body.insertAdjacentHTML('beforeend', loadingHtml);
            
            // Auto-remove after 5 seconds as a fallback
            setTimeout(() => {
                const overlay = document.getElementById('loadingOverlay');
                if (overlay) overlay.remove();
            }, 5000);
        }
    }
</script>
}

<style>
    .summary-card {
        border: 1px solid #e9ecef;
        border-radius: 12px;
        background: #fff;
        transition: transform 0.2s ease;
    }

    .summary-card:hover {
        transform: translateY(-2px);
    }

    .summary-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
    }

    .summary-title {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
        font-weight: 500;
    }

    .summary-value {
        font-size: 1.75rem;
        font-weight: 700;
        margin: 0;
        line-height: 1;
    }

    .contact-icon {
        flex-shrink: 0;
    }

    .preferences-info,
    .registration-info,
    .notification-stats {
        font-size: 0.875rem;
    }

    .table-container {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 12px;
        overflow: hidden;
    }

    .table-header {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-bottom: 1px solid #dee2e6;
    }

    .table-body {
        padding: 1.5rem;
    }

    .table-title {
        margin: 0;
        color: #495057;
        font-weight: 600;
    }

    .table-description {
        margin: 0.25rem 0 0 0;
        color: #6c757d;
        font-size: 0.875rem;
    }

    .page-header {
        background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);
        padding: 2rem;
        border: 1px solid #e9ecef;
        border-radius: 12px;
    }

    .page-icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.75rem;
        margin-right: 1rem;
        float: left;
    }

    .page-title-main {
        font-size: 2rem;
        font-weight: 700;
        color: #212529;
        margin: 0;
        display: flex;
        align-items: center;
    }

    .page-title-sub {
        font-size: 1rem;
        margin-top: 0.5rem;
        clear: left;
    }

    .page-action-btn {
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        transition: all 0.2s ease;
    }

    .page-action-btn.primary {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        border: none;
    }

    .page-action-btn:hover {
        background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
        transform: none;
    }

    .page-info {
        font-size: 0.875rem;
    }

    #bulkActionsPanel {
        border: 2px solid #007bff;
        border-radius: 12px;
        background: #fff;
    }

    /* Custom Modal Styles */
    .custom-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1050;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .custom-modal-backdrop {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.4);
    }
    
    .custom-modal-content {
        position: relative;
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 900px;
        max-height: 90vh;
        overflow: hidden;
        /* Remove shadow to eliminate the black shadow */
        box-shadow: none !important;
        border: 1px solid #dee2e6;
        z-index: 1051;
    }
    
    .custom-modal-header {
        background: #f8f9fa;
        color: #495057;
        padding: 1.25rem 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #dee2e6;
    }
    
    .custom-modal-title {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        color: #212529;
    }
    
    .custom-modal-close {
        background: none;
        border: none;
        color: #6c757d;
        font-size: 1.25rem;
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 4px;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.15s ease;
    }
    
    .custom-modal-close:hover {
        background-color: #e9ecef;
        color: #495057;
    }
    
    .custom-modal-body {
        padding: 1.5rem;
        max-height: calc(90vh - 100px);
        overflow-y: auto;
    }
    
    .loading-state {
        text-align: center;
        padding: 3rem 0;
    }
    
    /* Responsive Design */
    @@media (max-width: 768px) {
        .custom-modal-content {
            width: 95%;
            max-height: 95vh;
            margin: 1rem;
        }
        
        .custom-modal-header {
            padding: 1rem 1.5rem;
        }
        
        .custom-modal-body {
            padding: 1.5rem;
            max-height: calc(95vh - 100px);
        }
        
        .custom-modal-title {
            font-size: 1.1rem;
        }
    }
    
    /* Smooth scrollbar for modal body */
    .custom-modal-body::-webkit-scrollbar {
        width: 6px;
    }
    
    .custom-modal-body::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }
    
    .custom-modal-body::-webkit-scrollbar-thumb:hover {
        background: #a1a1a1;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }
    
    /* Currency input styling */
    .input-group .input-group-text:first-child {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }
    
    .input-group .input-group-text + .input-group-text {
        border-left: 0;
        font-weight: 600;
        color: #198754;
        background-color: #f8f9fa;
    }
    
    .input-group input[type="number"] {
        text-align: right;
        font-family: 'Courier New', monospace;
    }
</style>